{"version":3,"sources":["components/pageHeader/index.js","response.js","components/pagination/index.js","pages/home/index.js","pages/detail/index.js","components/backTop/index.js","components/follow/index.js","components/toast/index.js","index.js","assets/feature1.jpg","assets/feature2.jpg","assets/20210105231911.jpg","assets/favicon.ico","assets/sf.ico","assets/feature3.jpg"],"names":["PageHeaderComponent","onClick","type","dom","document","createElement","setAttribute","body","appendChild","click","parentNode","removeChild","window","toast","id","className","src","require","default","alt","style","color","marginTop","this","bind","padding","xmlns","version","viewBox","preserveAspectRatio","d","fill","Component","response","code","data","rief_content","category_id","cover_image","edit_type","html_content","is_english","is_gfw","is_original","link_url","mark_content","tag_ids","title","article_id","create_time","update_time","reference","message","sysTime","Paginationcomponent","props","state","currentPage","groupCount","startPage","totalPage","createPage","setState","pageConfig","pages","push","prePageHandeler","i","pageClick","pageLength","nextPageHandeler","getCurrentPage","changePage","pageList","HomePage","oringinList","list","pageSize","Math","ceil","length","filter","v","slice","map","moment","Number","format","addEventListener","hidden","history","jump","item","index","ReactMarkdown","DetailPage","infos","openNewWuindow","console","log","link","match","params","temp","find","Object","assign","JSON","parse","scrollTo","source","name","renderContent","BackTopComponent","scrollBtn","getElementById","scrollTop","documentElement","display","moveFunc","number","time","spacingTime","spacingInex","nowTop","everTop","scrollTimer","setInterval","clearInterval","FollowComponent","nickname","wechat","alert","clipboard","ClipboardJS","text","on","destroy","copy","ToastComponent","showToast","classList","add","remove","close","render","StrictMode","path","component","Home","exact","Detail"],"mappings":"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","file":"static/js/main.58f2e185.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class PageHeaderComponent extends Component {\r\n\tonClick = (type) => {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'github':\r\n\t\t\t\tlet dom = document.createElement('a');\r\n\t\t\t\tdom.setAttribute('href', 'https://github.com/lizifa');\r\n\t\t\t\tdom.setAttribute('target', '_blank');\r\n\t\t\t\tdocument.body.appendChild(dom);\r\n\t\t\t\tdom.click();\r\n\t\t\t\tdom.parentNode.removeChild(dom);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\twindow.toast('正在努力创作~');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<header id=\"header\">\r\n\t\t\t\t<div className=\"site-branding\">\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<img className=\"custom-logo avatar\" src={'' + require('../../assets/20210105231911.jpg').default} alt=\"\" />\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<h3 className=\"blog-description\" style={{ color: '#fff', marginTop: '20px' }}>\r\n\t\t\t\t\t\t搬运工-CV工程师\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t\t<div className=\"top-social\">\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<span onClick={this.onClick.bind(this, 'juejin')}>\r\n\t\t\t\t\t\t\t\t<img src={require('../../assets/favicon.ico').default} style={{ padding: '6px' }} alt=\"\" />\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<span onClick={this.onClick.bind(this, 'segmentfault')}>\r\n\t\t\t\t\t\t\t\t<img src={require('../../assets/sf.ico').default} style={{ padding: '6px' }} alt=\"\" />\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<span onClick={this.onClick.bind(this, 'github')}>\r\n\t\t\t\t\t\t\t\t<img src=\"https://jensonhui.top/usr/themes/Akina/images/github.png\" alt=\"\" />\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"animation-header\">\r\n\t\t\t\t\t<div className=\"decor-wrapper\">\r\n\t\t\t\t\t\t<svg id=\"header-decor\" className=\"decor bottom\" xmlns=\"https://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\r\n\t\t\t\t\t\t\t<path className=\"large left\" d=\"M0 0 L50 50 L0 100\" fill=\"rgba(255,255,255, .1)\"></path>\r\n\t\t\t\t\t\t\t<path className=\"large right\" d=\"M100 0 L50 50 L100 100\" fill=\"rgba(255,255,255, .1)\"></path>\r\n\t\t\t\t\t\t\t<path className=\"medium left\" d=\"M0 100 L50 50 L0 33.3\" fill=\"rgba(255,255,255, .3)\"></path>\r\n\t\t\t\t\t\t\t<path className=\"medium right\" d=\"M100 100 L50 50 L100 33.3\" fill=\"rgba(255,255,255, .3)\"></path>\r\n\t\t\t\t\t\t\t<path className=\"small left\" d=\"M0 100 L50 50 L0 66.6\" fill=\"rgba(255,255,255, .5)\"></path>\r\n\t\t\t\t\t\t\t<path className=\"small right\" d=\"M100 100 L50 50 L100 66.6\" fill=\"rgba(255,255,255, .5)\"></path>\r\n\t\t\t\t\t\t\t<path d=\"M0 99.9 L50 49.9 L100 99.9 L0 99.9\" fill=\"rgba(255,255,255, 1)\"></path>\r\n\t\t\t\t\t\t\t<path d=\"M48 52 L50 49 L52 52 L48 52\" fill=\"rgba(255,255,255, 1)\"></path>\r\n\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</header>\r\n\t\t);\r\n\t}\r\n}\r\n","export const response = {\r\n\tcode: 200,\r\n\tdata: [\r\n\t\t{\r\n\t\t\tid: 31,\r\n\t\t\trief_content: '大家都知道etTimeout可以接收两个参数，第一个参数是需要回调的函数，必须传入的参数，第二个参数是时间间隔，毫秒数，可以省略。但其实他可以接收更多的参数，那么这些参数是干什么用的呢？从第三个参数开始，依次用来表示传入回调函数的参数。',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content: '<h1><a id=\"setTimeout_0\"></a>setTimeout定时器原理</h1>\\n<p>昨天去面试的时候，被问到setTimeout设置的时间是不是准确的，那时自己也知道是不准确，但是被问到原因的时候，一时答不上来，所以后面思考了一下，其实原因是很简单的，只要想到事件循环就可以了。</p>\\n<ul>\\n<li>js是单线程执行，当遇到setTimeout时会把代码注册到异步队列中</li>\\n<li>只有当主线程的任务执行完，才会去检查异步队列中是否有可执行代码，因此setTimeout的实际执行时间会比设置的时间晚一些</li>\\n</ul>\\n<p>友情提示：<br />\\n主线程-&gt;微任务-&gt;宏任务</p>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content: '# setTimeout定时器原理\\n\\n 昨天去面试的时候，被问到setTimeout设置的时间是不是准确的，那时自己也知道是不准确，但是被问到原因的时候，一时答不上来，所以后面思考了一下，其实原因是很简单的，只要想到事件循环就可以了。\\n\\n+ js是单线程执行，当遇到setTimeout时会把代码注册到异步队列中\\n+ 只有当主线程的任务执行完，才会去检查异步队列中是否有可执行代码，因此setTimeout的实际执行时间会比设置的时间晚一些\\n\\n友情提示： 主线程->微任务->宏任务\\n附加：\\n\\n+ 宏任务：setTimeout、setInterval等\\n+ 微任务：Promise、MutaionObserver等\\n\\n',\r\n\t\t\ttag_ids: '[\"6809637767543259144\"]',\r\n\t\t\ttitle: 'setTimeout定时器原理',\r\n\t\t\tarticle_id: 'e1e25d00785ae9418d86c67c8bfdaef8',\r\n\t\t\tcreate_time: '1613909927000',\r\n\t\t\tupdate_time: '1615002595000',\r\n\t\t\treference: '[]',\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 30,\r\n\t\t\trief_content: '关键渲染路径是浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列。优化关键渲染路径可提高渲染性能。关键渲染路径包含了 文档对象模型 (DOM)，CSS 对象模型 (CSSOM)，渲染树和布局。',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content: '<h1><a id=\"_0\"></a>浏览器如何渲染网页</h1>\\n<h4><a id=\"_2\"></a>浏览器渲染一共有五步：</h4>\\n<ol>\\n<li>浏览器将获取的HTML文档并解析成DOM树</li>\\n<li>解析CSS，构成层叠样式表模型CSSOM</li>\\n<li>将DOM和CSSOM合并为渲染树</li>\\n<li>根据渲染树计算每一个节点的位置</li>\\n<li>调用系统资源，绘制图层，展示到用户面前</li>\\n</ol>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t'# 浏览器如何渲染网页\\n\\n#### 浏览器渲染一共有五步：\\n1. 浏览器将获取的HTML文档并解析成DOM树\\n2. 解析CSS，构成层叠样式表模型CSSOM\\n3. 将DOM和CSSOM合并为渲染树\\n4. 根据渲染树计算每一个节点的位置\\n5. 调用系统资源，绘制图层，展示到用户面前\\n\\n> 在解析 HTML 时会创建文档对象模型。HTML 可以请求 JavaScript，而 JavaScript  反过来，又可以更改 DOM。HTML 包含或请求样式，依次来构建 CSS 对象模型。浏览器引擎将两者结合起来以创建渲染树。布局确定页面上所有内容的大小和位置。确定布局后，将像素绘制到屏幕上。\\n\\n# 阻塞渲染\\n\\n当HTML解析器被脚本阻塞时，解析器虽然会停止构建DOM，但仍然会辨识该脚本后面的资源，并进行预加载。且由于以下两点。浏览器会延迟 JavaScript 的执行和 DOM 构建：\\n\\nCSS 被默认被视为阻塞渲染的资源，因此浏览器将在 CSSOM 构建完毕前不会渲染任何已处理的内容。\\nJavaScript 不仅可以读取和修改 DOM 属性，还可以读取和修改 CSSOM 属性，因此CSS解析与script的执行互斥。\\n\\n由于以上这些原因，script标签的位置很重要我们在实际开发中应该尽量坚持以下两个原则：\\n\\n在引入顺序上，CSS 资源先于 JavaScript 资源。简化并优化CSS选择器，尽量将嵌套层减少到最小(一般不超过4层)\\n样式文件应当在 head 标签中，而脚本文件在 body 结束前，这样可以防止阻塞的方式。\\n\\n\\n# 回流和重绘（reflow和repaint）\\n\\n重绘：\\n> 当前元素的样式(背景颜色、字体颜色等)发生改变的时候，我们只需要把改变的元素重新的渲染一下即可，重绘对浏览器的性能影响较小\\n\\n回流：\\n> 是指浏览器为了重新渲染部分或者全部的文档而重新计算文档中元素的位置和几何构造的过程\\n\\n注意：回流一定会触发重绘，而重绘不一定会回流\\n\\n# 优化渲染效率的建议\\n\\n1. 合法地去书写 HTML 和 CSS ，且不要忘了文档编码类型。\\n2. 样式文件应当在 head 标签中，而脚本文件在 body 结束前，这样可以防止阻塞的方式。\\n3. 简化并优化CSS选择器，尽量将嵌套层减少到最小。\\n4. 尽量减少在 JavaScript 中进行DOM操作。\\n5. 修改元素样式时，更改其class属性是性能最高的方法。\\n6. 尽量用 transform 来做形变和位移\\n7. 页面头部标明文档编码\\n',\r\n\t\t\ttag_ids: '[\"6809637767543259144\"]',\r\n\t\t\ttitle: '浅析浏览器渲染原理与过程',\r\n\t\t\tarticle_id: 'e7e352782bbf25795657869a4ea31891',\r\n\t\t\tcreate_time: '1613882768000',\r\n\t\t\tupdate_time: '1613900583000',\r\n\t\t\treference: '[{\"name\":\"MDN\",\"link\":\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/Critical_rendering_path\"}]',\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 28,\r\n\t\t\trief_content: '在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content:\r\n\t\t\t\t'<h1><a id=\"_0\"></a>概念</h1>\\n<p>节流 （throttle）与 防抖 （debounce）都是为了降低统一操作调用频率的一种方式。</p>\\n<ul>\\n<li>相同点都是需要设置一个回调函数及单位时间，区别在于：</li>\\n<li>防抖是在停止触发后的指定时间内，执行一次（在此时间段内，只要不停止触发，理论上就永远不会触发回调）</li>\\n<li>节流是在不断的触发过程中，单位时间就执行一次。</li>\\n</ul>\\n<h3><a id=\"_throttle_7\"></a>节流 throttle</h3>\\n<blockquote>\\n<p>在高频触发回调操作时，节流操作使回调函数在指定时间内只触发一次，期间内再触发，不会重新执行。</p>\\n</blockquote>\\n<pre><code class=\"lang-\">/**\\n * 节流\\n * @param callback \\n * @param wait \\n */\\nfunction throttle(callback = () =&gt; {}, delay = 1000) {\\n  let timer = 0;\\n  return (...args) =&gt; {\\n    if (timer) { return }\\n    timer = setTimeout(() =&gt; {\\n      callback(...args)\\n    }, delay)\\n  }\\n}\\n</code></pre>\\n<h3><a id=\"_debounce_27\"></a>防抖 debounce</h3>\\n<blockquote>\\n<p>在高频触发回调函数时，防抖操作使回调函数在一定时间间隔内，再次触发会清空定时器，并重新计时；计时结束后输出一次结果。</p>\\n</blockquote>\\n<pre><code class=\"lang-\">/**\\n * 防抖\\n * @param callback\\n * @param delay\\n */\\nfunction debounce(callback = () =&gt; {}, delay = 1000) {\\n  let timer = 0\\n  return (...args) =&gt; {\\n    clearTimeout(timer)\\n    timer = setTimeout(() =&gt; {\\n      callback(...args)\\n    }, delay)\\n  }\\n}\\n</code></pre>\\n<h3><a id=\"_46\"></a>常见场景</h3>\\n<ul>\\n<li>监听 scroll、mousemove 等事件 - 节流（每隔一秒计算一次位置）</li>\\n<li>监听浏览器窗口 resize 操作 - 防抖（只需计算一次）</li>\\n<li>键盘文本输入的验证 - 防抖（连续输入文字后发送请求进行验证，验证一次就好）</li>\\n<li>提交表单 - 防抖（多次点击变为一次）</li>\\n</ul>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t\"# 概念\\n节流 （throttle）与 防抖 （debounce）都是为了降低统一操作调用频率的一种方式。\\n\\n+ 相同点： 都是需要设置一个回调函数及单位时间\\n+ 区别在于：\\n\\t+ 防抖是在停止触发后的指定时间内，执行一次（在此时间段内，只要不停止触发，理论上就永远不会触发回调）\\n\\t+ 节流是在不断的触发过程中，单位时间就执行一次。\\n\\n### 节流 throttle\\n> 单位时间内，只会触发一次。\\n\\n```\\n/**\\n * 节流\\n * @param callback \\n * @param wait \\n */\\nfunction throttle(callback = () => {}, delay = 1000) {\\n  let timer = 0;\\n  return (...args) => {\\n    if (timer) { return }\\n    timer = setTimeout(() => {\\n      callback(...args)\\n    }, delay)\\n  }\\n}\\n```\\n\\n### 防抖 debounce\\n> 单位时间内，只要有新的操作触发，就会重新计时。\\n```\\nfunction debounce(callback , delay ) {\\n    let timer; // 记录定时器\\n    // 返回一个新的函数\\n    return function(event) {\\n\\t// 如果又被触发了，清除上次的定时器\\n        clearTimeout(timer);\\n        // 在下一次事件循环触发，并且记录定时器 id，以用于需要清理的时候。\\n        timer = setTimeout(() => {\\n            callback (event)\\n        }, delay )\\n    }\\n}\\ndocument.addEventListener('mousemove', debounce(handle, 100))//传入 handle 函数，100 毫秒后触发\\n\\n\\n```\\n\\n### 常见场景\\n\\n+ 监听 scroll、mousemove 等事件 - 节流（每隔一秒计算一次位置）\\n+ 监听浏览器窗口 resize 操作 - 防抖（只需计算一次）\\n+ 键盘文本输入的验证 - 防抖（连续输入文字后发送请求进行验证，验证一次就好）\\n+ 提交表单 - 防抖（多次点击变为一次）\\n\",\r\n\t\t\ttag_ids: '[\"6809637767543259144\"]',\r\n\t\t\ttitle: '理解节流 & 防抖',\r\n\t\t\tarticle_id: 'e82220ffe0dda0d43831d25534035117',\r\n\t\t\tcreate_time: '1613739775000',\r\n\t\t\tupdate_time: '1613902854000',\r\n\t\t\treference: '[]',\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 26,\r\n\t\t\trief_content: '2009年，W3C 提出了一种新的方案----Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content: '<p>ddddd</p>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t'\\n# # flex描述\\n\\n`flex` 是一个聚合属性，类似于 `margin` 属性，是 `margin-top, margin-right,margin-bottom,margin-left` 的缩写,是 `flex-grow，flex-shrink，flex-basis` 的缩写, 任何一个盒子都可以用 Flex 进行布局，只需设置 `display: flex`;\\n\\n# # 常见语法\\n```\\n/* 关键字值 */\\nflex: auto;\\nflex: initial;\\nflex: none;\\n\\n/* 一个值, 无单位数字: flex-grow */\\nflex: 2; \\n\\n/* 一个值, width/height: flex-basis */\\nflex: 10em;\\nflex: 30px;\\nflex: min-content;\\n\\n/* 两个值: flex-grow | flex-basis */\\nflex: 1 30px;\\n\\n/* 两个值: flex-grow | flex-shrink */\\nflex: 2 2;\\n\\n/* 三个值: flex-grow | flex-shrink | flex-basis */\\nflex: 2 2 10%;\\n\\n/*全局属性值 */\\nflex: inherit;\\nflex: initial;\\nflex: unset;\\n```\\n\\n可以使用一个，两个或三个值来指定 flex属性。\\n\\n单值语法: 值必须为以下其中之一:\\n\\n+ 一个无单位数`(<number>)` : 它会被当作`flex:<number> 1 0%` ; `<flex-shrink>` 的值被假定为1，然后`<flex-basis>` 的值被假定为0%。\\n+ 一个有效的宽度(width)值: 它会被当作 `<flex-basis>` 的值。\\n+ 关键字none，auto或initial.\\n\\n双值语法: 第一个值必须为一个无单位数，并且它会被当作 `<flex-grow>` 的值。第二个值必须为以下之一：\\n\\n+ 一个无单位数：它会被当作 `<flex-shrink>` 的值。\\n+ 一个有效的宽度值: 它会被当作 `<flex-basis>` 的值。\\n\\n三值语法:\\n\\n+ 第一个值必须为一个无单位数，并且它会被当作 `<flex-grow>` 的值。\\n+ 第二个值必须为一个无单位数，并且它会被当作  `<flex-shrink>` 的值。\\n+ 第三个值必须为一个有效的宽度值， 并且它会被当作 `<flex-basis>` 的值。\\n\\n# # 取值\\n`initial`\\n+ 元素会根据自身宽高设置尺寸。它会缩短自身以适应 flex 容器，但不会伸长并吸收 flex 容器中的剩余空间来适应 flex 容器 。相当于将属性设置为\"flex: 0 1 auto\"。\\n\\n`auto`\\n+ 元素会根据自身的宽度与高度来确定尺寸，但是会伸长并吸收 flex 容器中额外的自由空间，也会缩短自身来适应 flex 容器。这相当于将属性设置为 \"flex: 1 1 auto\".\\n\\n`none`\\n+ 元素会根据自身宽高来设置尺寸。它是完全非弹性的：既不会缩短，也不会伸长来适应 flex 容器。相当于将属性设置为\"flex: 0 0 auto\"。\\n\\n`<\\'flex-grow\\'>`\\n+ 定义 flex 项目的 flex-grow 。负值无效。省略时默认值为 1。 (初始值为 0)\\n\\n`<\\'flex-shrink\\'>`\\n+ 定义 flex 元素的 flex-shrink 。负值无效。省略时默认值为1。 (初始值为 1)\\n\\n`<\\'flex-basis\\'>`\\n+ 定义 flex 元素的 flex-basis 属性。若值为0，则必须加上单位(虽然可以写为0，但是浏览器会自动帮你加上单位)，以免被视作伸缩性。省略时默认值为 0。(初始值为 auto)\\n\\n# # 剩余空间/溢出空间概念\\n\\n```\\n<style>\\n  .box {\\n    display: flex;\\n    background-color: gray;\\n    width: 500px;\\n  }\\n  .box div {\\n    flex: 1;\\n  }\\n  .a {\\n    background-color: red;\\n    flex: inherit;\\n    width: 150px;\\n  }\\n  .b {\\n    background-color: yellow;\\n    width: 100px;\\n  }\\n  .c {\\n    background-color: blue;\\n    width: 100px;\\n  }\\n</style>\\n\\n<div class=\"box\">\\n  <div class=\"a\">a</div>\\n  <div class=\"b\">b</div>\\n  <div class=\"c\">c</div>\\n</div>\\n```\\n\\n剩余空间(150px) = box的宽度(500px) - ( a的宽度(150px) +b的宽度(100px) + c的宽度(100px) )\\n\\n假设a的宽度为450px\\n\\n溢出空间(150px) = ( a的宽度(450px) +b的宽度(100px) + c的宽度(100px) ) - box的宽度(500px)\\n\\n每逢理论过后，必有实战, 接下来我们来测试几个属性 ~~~\\n\\n# # flex-grow\\n\\n定义和用法\\n\\n+ flex-grow 属性用于设置或检索弹性盒子的扩展比率。\\n+ 注意：如果元素不是弹性盒对象的元素，则 flex-grow 属性不起作用。\\n+ 语法是 flex-grow: number|initial|inherit;\\n\\n```\\n<style>\\n  .box {\\n    display: flex;\\n    background-color: gray;\\n    width: 1000px;\\n  }\\n  .a {\\n    background-color: red;\\n    width: 100px;\\n    flex-grow: 1;\\n  }\\n  .b {\\n    background-color: yellow;\\n    width: 100px;\\n    flex-grow: 2;\\n  }\\n  .c {\\n    background-color: blue;\\n    width: 100px;\\n    flex-grow: 3;\\n  }\\n</style>\\n\\n<div class=\"box\">\\n  <div class=\"a\">a</div>\\n  <div class=\"b\">b</div>\\n  <div class=\"c\">c</div>\\n</div>\\n\\n```\\n根据剩余空间的计算方式，可以得出：\\n\\n剩余空间：x = 700\\n三个子元素，`flex-grow` 的值分别为a = 1, b = 2, c = 3,把剩余空间分成6等分，占比为 `1：2：3`\\n每个元素可以分配的剩余空间为：\\na/(a+b+c) * x，b/(a+b+c) * x，c/(a+b+c) * x\\n\\n以 a 为例子进行说明： a 占比剩余空间：1/(1+2+3) = 1/6，那么 a 能分到到的值是 x*1/6=116.67，实际宽度为100+116.67=216.67,同理b = 333, c = 450\\n\\n总结： flex-grow 的作用是把多余的空间按权 `flex-grow: <number>` 重分给各个子元素\\n\\n\\n# # flex-shrink\\n\\n+ flex-shrink 属性指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。\\n+ 注意：如果元素不是弹性盒对象的元素，则 flex-shrink 属性不起作用。\\n+ flex-shrink的默认值为1\\n\\n实战训练\\n```\\n<style>\\n  .box {\\n    display: flex;\\n    background-color: gray;\\n    width: 1000px;\\n  }\\n  .a {\\n    background-color: red;\\n    width: 500px;\\n    flex-shrink: 3;\\n  }\\n  .b {\\n    background-color: yellow;\\n    width: 400px;\\n    flex-shrink: 3;\\n  }\\n  .c {\\n    background-color: blue;\\n    width: 200px;\\n    flex-shrink: 4;\\n  }\\n</style>\\n\\n<div class=\"box\">\\n  <div class=\"a\">a</div>\\n  <div class=\"b\">b</div>\\n  <div class=\"c\">c</div>\\n</div>\\n\\n```\\n实例解析：\\n\\n本例中a、b、c 显式定义了 flex-shrink 为 3, 3, 4，所以计算出来总共将溢出空间分成了 10 份。\\n我们可以看到父容器定义为 1000px，子项相加之后即为 1100 px，超出父容器 100px(溢出空间)。那么超出的 100px 需要被 a, b, c 消化 通过收缩因子，所以加权综合可得 800 * 3 + 300 * 3 + 200 * 4 = 2000px。\\n\\n计算方式：\\n\\n+ 三个flex item元素的width: w1 = 500px, w2 = 400px, w3 = 200px\\n+ 三个flex item元素的flex-shrink：a = 3, b = 3, c = 4\\n+ 计算总压缩权重：\\n+ sum = a * w1 + b * w2 + c * w3\\n+ 计算每个元素压缩率：\\n+ S1 = a * w1 / sum，S2 =b * w2 / sum，S3 =c * w3 / sum\\n+ 计算每个元素宽度：width - 压缩率 * 溢出空间\\n\\n所以最终显示 效果为 w1=457.14285714285717, w2=365.7142857142857, w3=177.14285714285714\\n\\n总结：flex-shrink 将子元素宽度之和与父元素宽度的差值按照子元素 flex-shrink 的值分配给各个子元素，每个子元素原本宽度减去按比例分配的值，其剩余值为实际宽度。\\n\\n# # flex-basis\\n\\n定义和用法\\n+ flex-basis 属性用于设置或检索弹性盒伸缩基准值。。\\n+ 注意：如果元素不是弹性盒对象的元素，则 flex-basis 属性不起作用。\\n+ flex-basis: number|auto|initial|inherit;\\n',\r\n\t\t\ttag_ids: '[\"6809637767543259144\"]',\r\n\t\t\ttitle: '深入理解 flex-grow、flex-shrink、flex-basis',\r\n\t\t\tarticle_id: '66ff2cd54aa70e44623d78e7a01af7ef',\r\n\t\t\tcreate_time: '1611928168000',\r\n\t\t\tupdate_time: '1612067515000',\r\n\t\t\treference: '[{\"name\":\"MDN\",\"link\":\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex#%E6%AD%A3%E5%BC%8F%E8%AF%AD%E6%B3%95\"},{\"name\":\"runoob.com\",\"link\":\"https://www.runoob.com\"}]',\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 25,\r\n\t\t\trief_content: '为什么会有消息队列和事件循环呢？首先最关键的一点在于JS是个单线程，并且主线程非常繁忙，既要处理 DOM，又要计算样式，还要处理布局，同时还需要处理 JavaScript 任务以及各种输入事件。要让这么多不同类型的任务在主线程中有条不紊地执行，这就需要一个系统来统筹调度这些任务，这个统筹调度系统就是消息队列和事件循环系统。',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content: '<p>j667jj67</p>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t'# 彻底理解同步、异步和事件循环(Event Loop)\\n\\n### 一、线程与进程的概念\\n\\n>进程是 CPU 资源分配的最小单位；线程是 CPU 调度的最小单位\\n\\n### 二、浏览器内核\\n>简单来说浏览器内核是通过取得页面内容、整理信息（应用 CSS）、计算和组合最终输出可视化的图像结果，通常也被称为渲染引擎。\\n\\n浏览器内核是多线程，在内核控制下各线程相互配合以保持同步，一个浏览器通常由以下常驻线程组成：\\n\\n+ GUI 渲染线程\\n+ JavaScript 引擎线程\\n+ 定时触发器线程\\n+ 事件触发线程\\n+ 异步 http 请求线程\\n\\n### 1. GUI 渲染线程\\n>主要负责页面的渲染，解析 HTML、CSS，构建 DOM 树，布局和绘制等。\\n当界面需要重绘或者由于某种操作引发回流时，将执行该线程。\\n该线程与 JS 引擎线程互斥，当执行 JS 引擎线程时，GUI 渲染会被挂起，当任务队列空闲时，JS 引擎才会去执行 GUI 渲染。\\n### 2. JS 引擎线程\\n> 该线程当然是主要负责处理 JavaScript 脚本，执行代码。\\n也是主要负责执行准备好待执行的事件，即定时器计数结束，或者异步请求成功并正确返回时，将依次进入任务队列，等待 JS 引擎线程的执行。\\n当然，该线程与 GUI 渲染线程互斥，当 JS 引擎线程执行 JavaScript 脚本时间过长，将导致页面渲染的阻塞。\\n## 3. 定时器触发线程\\n> 负责执行异步定时器一类的函数的线程，如： setTimeout，setInterval。\\n主线程依次执行代码时，遇到定时器，会将定时器交给该线程处理，当计数完毕后，事件触发线程会将计数完毕后的事件加入到任务队列的尾部，等待 JS 引擎线程执行。\\n### 4. 事件触发线程\\n>主要负责将准备好的事件交给 JS 引擎线程执行。\\n比如 setTimeout 定时器计数结束， ajax 等异步请求成功并触发回调函数，或者用户触发点击事件时，该线程会将整装待发的事件依次加入到任务队列的队尾，等待 JS 引擎线程的执行。\\n\\n### 5. 异步 http 请求线程\\n> 负责执行异步请求一类的函数的线程，如： Promise，axios，ajax 等。\\n主线程依次执行代码时，遇到异步请求，会将函数交给该线程处理，当监听到状态码变更，如果有回调函数，事件触发线程会将回调函数加入到任务队列的尾部，等待 JS 引擎线程执行。\\n\\n# 三、浏览器中的 Event Loop\\n\\n### 1. Micro-Task 与 Macro-Task\\n>事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。宏任务队列可以有多个，微任务队列只有一个。\\n\\n常见的 macro-task 比如：setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作、UI 渲染等。\\n常见的 micro-task 比如: process.nextTick、new Promise().then(回调)、MutationObserver(html5 新特性) 等。\\n\\n### 2. Event Loop 过程解析\\n> 当某个宏任务执行完后,会查看是否有微任务队列。如果有，先执行微任务队列中的所有任务，如果没有，会读取宏任务队列中排在最前的任务，执行宏任务的过程中，遇到微任务，依次加入微任务队列。栈空后，再次读取微任务队列里的任务，依次类推。',\r\n\t\t\ttag_ids: '[\"6809637767543259144\"]',\r\n\t\t\ttitle: '浏览器与Node的事件循环(Event Loop)有何区别?',\r\n\t\t\tarticle_id: 'd5ef556f95892778752b069eb9e75548',\r\n\t\t\tcreate_time: '1611910973000',\r\n\t\t\tupdate_time: '1612308105000',\r\n\t\t\treference: '[{\"name\":\"浏览器和Node中Event Loop其实是不相同的\",\"link\":\"https://zhuanlan.zhihu.com/p/54882306\"}]',\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 24,\r\n\t\t\trief_content: '闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content: '<p>的方法高</p>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t'# 闭包概念\\n\\n一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。\\n\\n# 词法作用域\\n```\\n(function() {\\n    var nickName = \"小书包\"; // name 是一个被匿名函数创建的局部变量\\n    function fn() { // fn 是内部函数，一个闭包\\n        alert( nickName ); // 使用了父函数中声明的变量\\n    }\\n    fn();\\n})()\\n```\\n在该函数中创建了一个局部变量 `nickName` 和一个名为 `fn` 的函数。`fn` 是定义在函数里的内部函数，并且仅在匿名函数体内可用。请注意，`fn` 没有自己的局部变量。然而，因为它可以访问到外部函数的变量，所以 `fn` 可以使用匿名函数中声明的变量 `nickName`。\\n\\n# 闭包\\n现在来考虑以下例子 ：\\n```\\nfunction foo() {\\n    var nickName = \"小书包\";\\n    function fn() {\\n        alert(nickName);\\n    }\\n    return fn;\\n}\\n\\nvar callback = foo();\\ncallback();\\n```\\n我们把 `foo` 函数的返回值赋值给了一个 `callback` 变量, `foo`执行后 相当于把 `nickName `暴露给了 `全局`\\n\\n```\\n(function(){\\n  var nickName = \"小书包\";\\n  alert(nickName);\\n})()\\n```\\n\\n# 使用场景\\n\\n#### 1. 为节点循环绑定click事件\\n``` \\n<style>\\n  ul {\\n    list-style: none;\\n  }\\n  li {\\n    line-height: 40px;\\n    text-align: center;\\n    border-bottom: 1px solid #f0f0f0;\\n    cursor: pointer;\\n  }\\n</style>\\n<ul>\\n  <li>0</li>\\n  <li>1</li>\\n  <li>2</li>\\n  <li>3</li>\\n  <li>4</li>\\n</ul>\\n<script>\\n  let list = Array.from(document.querySelectorAll(\"li\"));\\n  let length = list.length;\\n  for (let i = 0; i < length; i++) {\\n    ((i) => {\\n      list[i].onclick = function () {\\n        console.log(i);\\n      };\\n    })(i);\\n  }\\n</script>\\n\\n```\\n\\n#### 2. 对结果进行缓存\\n```\\nfunction add(x) {\\n  let baseNum = x;\\n  function fn(y) {\\n    return x + y;\\n  }\\n  return fn\\n}\\nlet add10 = add(10);\\nconsole.log(add10(20))\\n```\\n\\n#### 3.模块化开发\\n```\\n  let tools = (function () {\\n    let nickName = \"小书包\";\\n    function getNickName() {\\n      return nickName;\\n    }\\n    return {\\n      nickName,\\n      getNickName,\\n    };\\n  })();\\n\\n  console.log(tools.nickName);\\n```\\n\\n# 闭包的作用\\n\\n# 缺点\\n增大内存消耗。闭包里的引用无法被垃圾回收，增大内存用量，使用不当会导致内存泄漏。\\n对处理速度有影响。闭包的层级决定了引用在查找时经过的作用域链长度。',\r\n\t\t\ttag_ids: '[\"6809637767543259144\"]',\r\n\t\t\ttitle: '学习Javascript闭包',\r\n\t\t\tarticle_id: 'a09a83640bcb50dae1ac1425dd340200',\r\n\t\t\tcreate_time: '1611910884000',\r\n\t\t\tupdate_time: '1612798687000',\r\n\t\t\treference: '[{\"name\":\"MDN\",\"link\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\"}]',\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 23,\r\n\t\t\trief_content: '为什么会有消息队列和事件循环呢？首先最关键的一点在于JS是个单线程，并且主线程非常繁忙，既要处理 DOM，又要计算样式，还要处理布局，同时还需要处理 JavaScript 任务以及各种输入事件。要让这么多不同类型的任务在主线程中有条不紊地执行，这就需要一个系统来统筹调度这些任务，这个统筹调度系统就是消息队列和事件循环系统。',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content: '<p>个人沟通</p>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t'# JS事件循环\\n\\n### 一、为什么JS是单线程\\n是由JS的用途决定的，其用途主要是与用户互动，以及操作DOM，如果不是单线程的话会带来很复杂的同步问题。比如：如果是多线程的话，一个用户新建一个DOM，另一个用户删除同一个DOM，该如何处理将变得非常麻烦。\\n在html5中提出了web worker（todo 改天添加web worker的讲解）标准，JS可以创建多个线程或者是iframe，但是其他子线程主要是用来进行JS计算不能操作DOM，且受到子线程的控制。所以也并没有改变JS单线程的本质\\n### 二、同步和异步\\n由于是单线程，所有任务需要排队，但是如果队列中所有的任务都是同步的话会造成资源的浪费。\\n于是任务分为两类：同步任务和异步任务。\\n异步任务的过程：\\n> 主线程（函数调用栈）发起一个异步请求，相应的工作线程接收请求，并告知主线程已经收到，主线程继续执行后面的同步代码，同时工作线程执行异步任务，工作线程完成工作后，通知主线程，主线程收到通知后，执行回调函数\\n\\n### 三、宏任务和微任务\\n宏任务（macro-task）主要是：script代码段、setTimeout、setInterval、Promise的构造函数是同步的、setImmediate、I/O、UIrendering\\n微任务（micro-task）主要是：Promise的回调、process.nextTick\\n\\n\\n\\n### 四、浏览器执行线程\\n> 在解释事件循环之前首先先解释一下浏览器的执行线程：\\n浏览器是多进程的，浏览器每一个 tab 标签都代表一个独立的进程，其中浏览器渲染进程（浏览器内核）属于浏览器多进程中的一种，主要负责页面渲染，脚本执行，事件处理等\\n其包含的线程有：GUI 渲染线程（负责渲染页面，解析 HTML，CSS 构成 DOM 树）、JS 引擎线程、事件触发线程、定时器触发线程、http 请求线程等主要线程\\n\\n\\n### 五、任务队列和事件循环\\n了解任务队列之前，先了解一下任务源，我们将发起异步任务的称之为任务源（setTimeout、Promise等），进入任务队列的是他们指定的任务。\\n在一个线程中，事件循环是唯一的，任务队列是多个的。来自不同任务源的队列进入到不同的任务队列，setTimeout和setInterval是同源的\\n\\n事件循环的步骤：\\n> 1、运行主线程（函数调用栈）中的同步任务\\n2、主线程（函数调用栈）执行到任务源时，通知相应的webAPIs进行相应的执行异步任务，将任务源指定的异步任务放入任务队列中\\n3、主线程（函数调用栈）中的任务执行完毕后，然后执行所有的微任务，再执行宏任务，找到一个任务队列执行完毕，再执行所有的微任务\\n4、不断执行第三步',\r\n\t\t\ttag_ids: '[\"6809637767543259144\"]',\r\n\t\t\ttitle: '浏览器中javascript事件循环',\r\n\t\t\tarticle_id: 'e144cc1ef6ee0d50da11a3eb5457e372',\r\n\t\t\tcreate_time: '1611910706000',\r\n\t\t\tupdate_time: '1613902846000',\r\n\t\t\treference: '[{\"name\":\"JS事件循环\",\"link\":\"https://juejin.cn/post/6844903577891291143\"}]',\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 21,\r\n\t\t\trief_content: 'script标签用于加载脚本与执行脚本，在前端开发中可以说是非常重要的标签了。直接使用script脚本的话，html会按照顺序来加载并执行脚本，在脚本加载&执行的过程中，会阻塞后续的DOM渲染。',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content:\r\n\t\t\t\t'<h1><a id=\"defer_0\"></a>defer</h1>\\n<ul>\\n<li>定义和用法（w3c文档）\\n<ul>\\n<li>defer 属性规定是否对脚本执行进行延迟，直到页面加载为止。</li>\\n<li>有的 javascript 脚本 document.write 方法来创建当前的文档内容，其他脚本就不一定是了。</li>\\n<li>如果您的脚本不会改变文档的内容，可将 defer 属性加入到 <code>&lt;script&gt;</code> 标签中，以便加快处理文档的速度。因为浏览器知道它将能够安全地读取文档的剩余部分而不用执行脚本，它将推迟对脚本的解释，直到文档已经显示给用户为止。</li>\\n</ul>\\n</li>\\n</ul>\\n<p>我们创建一个 demo 文件夹</p>\\n<blockquote>\\n<p>demo-script<br />\\n+index.html<br />\\n+script1.js // console.log(’‘script1’)<br />\\n+script2.js // console.log(’‘script2’)<br />\\n+script3.js // console.log(’‘script3’)</p>\\n</blockquote>\\n<pre><code class=\"lang-\">&lt;!DOCTYPE html&gt;\\n&lt;html lang=&quot;en&quot;&gt;\\n  &lt;head&gt;\\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\\n    &lt;title&gt;Document&lt;/title&gt;\\n  &lt;/head&gt;\\n  &lt;body&gt;\\n    &lt;script&gt;\\n      console.log(\\'script0\\');\\n    &lt;/script&gt;\\n    &lt;script src=&quot;script1.js&quot;&gt;&lt;/script&gt;\\n    &lt;script src=&quot;script2.js&quot;&gt;&lt;/script&gt;\\n    &lt;script src=&quot;script3.js&quot;&gt;&lt;/script&gt;\\n  &lt;/body&gt;\\n&lt;/html&gt;\\n\\n</code></pre>\\n<p>打开控制台，可以看到文件按书写顺序依次加载，依次输出 script0, script1, script2, script3</p>\\n<h1><a id=\"async_41\"></a>async</h1>\\n<ul>\\n<li>定义和用法\\n<ul>\\n<li>async 属性规定一旦脚本可用，则会异步执行。</li>\\n<li>注释：async 属性仅适用于外部脚本（只有在使用 src 属性时）。</li>\\n<li>注释：有多种执行外部脚本的方法：</li>\\n<li>如果 async=“async”：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）</li>\\n<li>如果不使用 async 且 defer=“defer”：脚本将在页面完成解析时执行</li>\\n<li>如果既不使用 async 也不使用 defer：在浏览器继续解析页面之前，立即读取并执行脚本</li>\\n</ul>\\n</li>\\n</ul>\\n<h1><a id=\"_52\"></a>使用场景</h1>\\n<pre><code>+ 比如有些第三方库，要求在header中引入（这就意味着第三方插件库会优先加载），但是我们并不需要在页面加载之初就用到这个插件。那么我们可以加上defer属性使之最后加载。同理，如果页面加载的同时需要用到第三方插件，那么我们引用的时候可以加async属性，这样网站内的资源就可以与插件资源异步加载。这中方法会给网站其他资源的加载节省出一些时间，不失为一种页面优化的方法。</code></pre>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t'# defer \\n\\n+ 定义和用法（w3c文档）\\n    - defer 属性规定是否对脚本执行进行延迟，直到页面加载为止。\\n    - 有的 javascript 脚本 document.write 方法来创建当前的文档内容，其他脚本就不一定是了。\\n    - 如果您的脚本不会改变文档的内容，可将 defer 属性加入到 `<script>` 标签中，以便加快处理文档的速度。因为浏览器知道它将能够安全地读取文档的剩余部分而不用执行脚本，它将推迟对脚本的解释，直到文档已经显示给用户为止。\\n  \\n我们创建一个 demo 文件夹\\n\\n> demo-script\\n>  + index.html\\n> + script1.js // console.log(\\'\\'script1\\')\\n>  + script2.js // console.log(\\'\\'script2\\')\\n>  + script3.js // console.log(\\'\\'script3\\')\\n```\\n<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <title>Document</title>\\n  </head>\\n  <body>\\n    <script>\\n      console.log(\\'script0\\');\\n    </script>\\n    <script src=\"script1.js\"></script>\\n    <script src=\"script2.js\"></script>\\n    <script src=\"script3.js\"></script>\\n  </body>\\n</html>\\n\\n\\n```\\n\\n打开控制台，可以看到文件按书写顺序依次加载，依次输出 script0, script1, script2, script3\\n\\n测试证明：js文件依然按照书写顺序加载。\\n\\n这个属性的用途是表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在`<script>`元素中设置defer属性，相当于告诉浏览器立即下载，但延迟执行。\\n\\nHTML5规范要求脚本按照它们出现的先后顺序执行，因此第一个延迟脚本会先于第二个延迟脚本执行，而这两个脚本会先于DOMContentLoaded事件执行。在现实当中，延迟脚本并不一定会按照顺序执行，也不一定会在DOMContentLoad时间触发前执行，因此最好只包含一个延迟脚本。\\n\\n\\n\\n# async\\n\\n+ 定义和用法（w3c文档）\\n    - async 属性规定一旦脚本可用，则会异步执行。\\n    - 注释：async 属性仅适用于外部脚本（只有在使用 src 属性时）。\\n    - 注释：有多种执行外部脚本的方法：\\n    - 如果 async=\"async\"：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）\\n    - 如果不使用 async 且 defer=\"defer\"：脚本将在页面完成解析时执行\\n    - 如果既不使用 async 也不使用 defer：在浏览器继续解析页面之前，立即读取并执行脚本\\n\\n```\\n<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <title>Document</title>\\n  </head>\\n  <body>\\n    <script>\\n      console.log(\\'script0\\');\\n    </script>\\n    <script src=\"script1.js\"></script>\\n    <script src=\"script2.js\" async></script>\\n    <script src=\"script3.js\"></script>\\n  </body>\\n</html>\\n```\\n测试：当文件执行到script2的时候，以部去加载之后的文件，加载完后，执行，script0, script1, script3, script2\\n\\n这个属性与defer类似，都用于改变处理脚本的行为。同样与defer类似，async只适用于外部脚本文件，并告诉浏览器立即下载文件。但与defer不同的是，标记为async的脚本并不保证按照它们的先后顺序执行。\\n第二个脚本文件可能会在第一个脚本文件之前执行。因此确保两者之间互不依赖非常重要。指定async属性的目的是不让页面等待两个脚本下载和执行，从而异步加载页面其他内容。\\n\\n# 使用场景\\n比如有些第三方库，要求在header中引入（这就意味着第三方插件库会优先加载），但是我们并不需要在页面加载之初就用到这个插件。那么我们可以加上defer属性使之最后加载。同理，如果页面加载的同时需要用到第三方插件，那么我们引用的时候可以加async属性，这样网站内的资源就可以与插件资源异步加载。这中方法会给网站其他资源的加载节省出一些时间，不失为一种页面优化的方法。',\r\n\t\t\ttag_ids: '[\"6809637767543259144\"]',\r\n\t\t\ttitle: 'script标签中的async、defer属性',\r\n\t\t\tarticle_id: 'ce05bc500d14d387103188288f72e638',\r\n\t\t\tcreate_time: '1611889494000',\r\n\t\t\tupdate_time: '1612067588000',\r\n\t\t\treference: '[{\"name\":\"w3c学院\",\"link\":\"https://www.w3school.com.cn/\"}]',\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 20,\r\n\t\t\trief_content: '在一个访问量不高的网站中，多一个这样的请求也无所谓，但在一个千万级访问量甚至更高的WEB站点里，这样会导致你的服务器和带宽的成本显著增加。 另外一个隐患是，重新请求某个页面可能会导致用户的一些信息被无意中修改。',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content:\r\n\t\t\t\t'<h1><a id=\"imgsrc_1\"></a>img标签src为空的陷阱</h1>\\n<p>转载 =&gt; <a href=\"http://youngae520.lofter.com/post/28e9e5_a67a8a\" target=\"_blank\">原文链接</a></p>\\n<p>把页面中的img标签的src设置为“”存在巨大的风险，无论是在html中写入</p>\\n<pre><code class=\"lang-\">  &lt;img src=&quot;&quot; /&gt;\\n</code></pre>\\n<p>还是在js中写入</p>\\n<pre><code class=\"lang-\">var img = new Image(); \\nimg.src = &quot;&quot;;\\n</code></pre>\\n<p>出现一次这样的标签会导致向你的服务器多做一次请求。</p>\\n<ul>\\n<li>\\n<p>在IE中，这样做会请求一次当前页面所在的目录。如在https://playgoogle.com/demo/a.html 中出现这种空src的标签，会导致重新请求一次://playgoogle.com/demo/</p>\\n</li>\\n<li>\\n<p>在Safari 和 Chrome中，将请求当前页面本身。</p>\\n</li>\\n<li>\\n<p>在Firefox 3.5以前的版本中，有和Safari同样的问题，但是在3.5中修正了这个BUG。</p>\\n</li>\\n<li>\\n<p>在Opera 中，不会做额外的请求。</p>\\n</li>\\n</ul>\\n<p>在一个访问量不高的网站中，多一个这样的请求也无所谓（甚至可以让你的网站浏览看上去翻番），但在一个千万级访问量甚至更高的WEB站点里，这样会导致你的服务器和带宽的成本显著增加。 另外一个隐患是，重新请求某个页面可能会导致用户的一些信息被无意中修改，例如cookies，或者ajax操作。</p>\\n<p>你永远不会写出这样的代码？<br />\\n我并不这么认为，很多时候这种情况在无意中出现，比如下面这段php代码：</p>\\n<pre><code class=\"lang-\">  &lt;img src=&quot;$imageUrl&quot; &gt;\\n</code></pre>\\n<p>你原计划是从服务器端读取这个src地址，但是由于某个原因，这个地址还未设置，或者代码的BUG导致读取失败，就会出现空的src标签。</p>\\n<p>其他的标签中的空src会不会导致这样的问题？<br />\\n好消息是，在IE中只有image标签有这个问题。坏消息是，在Chrome, Safari, 和 Firefox中script的sr为空 和link的href为空 都会导致出现一个新的请求。</p>\\n<p>如何解决这个问题？<br />\\n可以从两方面着手，一是尽量避免这种坏的编程方式，不要出现空的src标签。另外，可以从服务器端着手，在发现时这种无意义的请求时不要返回任何东西给客户端。</p>\\n<pre><code class=\"lang-\">  $referrer = isset($_SERVER[\\'HTTP_REFERER\\']) ? $_SERVER[\\'HTTP_REFERER\\'] : \\'\\';\\n  $url = &quot;https://&quot; . $_SERVER[\\'HTTP_HOST\\']  . $_SERVER[\\'REQUEST_URI\\'];\\n  if ($referrer == $url){\\n      exit;\\n  }\\n\\n</code></pre>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: 'http://youngae520.lofter.com/post/28e9e5_a67a8a',\r\n\t\t\tmark_content:\r\n\t\t\t\t\"\\n# img标签src为空的陷阱\\n\\n转载 => [原文链接](http://youngae520.lofter.com/post/28e9e5_a67a8a)\\n\\n把页面中的img标签的src设置为“”存在巨大的风险，无论是在html中写入\\n```\\n  <img src=\\\"\\\" />\\n```\\n还是在js中写入\\n\\n```\\nvar img = new Image(); \\nimg.src = \\\"\\\";\\n```\\n\\n出现一次这样的标签会导致向你的服务器多做一次请求。\\n\\n+ 在IE中，这样做会请求一次当前页面所在的目录。如在https://playgoogle.com/demo/a.html 中出现这种空src的标签，会导致重新请求一次://playgoogle.com/demo/\\n\\n+ 在Safari 和 Chrome中，将请求当前页面本身。\\n\\n+ 在Firefox 3.5以前的版本中，有和Safari同样的问题，但是在3.5中修正了这个BUG。\\n\\n+ 在Opera 中，不会做额外的请求。\\n\\n在一个访问量不高的网站中，多一个这样的请求也无所谓（甚至可以让你的网站浏览看上去翻番），但在一个千万级访问量甚至更高的WEB站点里，这样会导致你的服务器和带宽的成本显著增加。 另外一个隐患是，重新请求某个页面可能会导致用户的一些信息被无意中修改，例如cookies，或者ajax操作。\\n\\n你永远不会写出这样的代码？\\n我并不这么认为，很多时候这种情况在无意中出现，比如下面这段php代码：\\n\\n```\\n  <img src=\\\"$imageUrl\\\" >\\n```\\n你原计划是从服务器端读取这个src地址，但是由于某个原因，这个地址还未设置，或者代码的BUG导致读取失败，就会出现空的src标签。\\n\\n\\n其他的标签中的空src会不会导致这样的问题？\\n好消息是，在IE中只有image标签有这个问题。坏消息是，在Chrome, Safari, 和 Firefox中script的sr为空 和link的href为空 都会导致出现一个新的请求。\\n\\n\\n如何解决这个问题？\\n可以从两方面着手，一是尽量避免这种坏的编程方式，不要出现空的src标签。另外，可以从服务器端着手，在发现时这种无意义的请求时不要返回任何东西给客户端。\\n\\n```\\n  $referrer = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '';\\n  $url = \\\"https://\\\" . $_SERVER['HTTP_HOST']  . $_SERVER['REQUEST_URI'];\\n  if ($referrer == $url){\\n      exit;\\n  }\\n\\n```\",\r\n\t\t\ttag_ids: '[\"6809637772874219534\"]',\r\n\t\t\ttitle: 'img标签src为空，对页面会有什么影响？',\r\n\t\t\tarticle_id: '4e68002d54255aa66bc85e73d2c83fdc',\r\n\t\t\tcreate_time: '1611822770000',\r\n\t\t\tupdate_time: '1612067658000',\r\n\t\t\treference: '[{\"name\":\"http://youngae520.lofter.com/\",\"link\":\"http://youngae520.lofter.com/post/28e9e5_a67a8a\"}]',\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 19,\r\n\t\t\trief_content: 'this 的指向是由其所在的环境决定，并不是固定不变，且只能在函数体内调用，指向的就是调用方法的对象\\n\\n',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content: '<h2><a id=\"_1_0\"></a>场景 1</h2>\\n<pre><code class=\"lang-\">  function fn1() {\\n    console.log(this); // window\\n  }\\n\\n  function fn2() {\\n    \\'use strict\\';\\n    console.log(this); // undefined\\n  }\\n\\n  fn1();\\n  fn2()\\n</code></pre>\\n<ul>\\n<li>函数在浏览器全局环境中被调用，非严格模式下 this 指向 window; 在 use strict 指明严格模式的情况下就是 undefined</li>\\n</ul>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t\"## 情景 1\\n\\n```\\n  function fn1() {\\n    console.log(this); // window\\n  }\\n\\n  function fn2() {\\n    'use strict';\\n    console.log(this); // undefined\\n  }\\n\\n  fn1();\\n  fn2()\\n```\\n+ 函数在浏览器全局环境中被调用，非严格模式下 this 指向 window; 在 use strict 指明严格模式的情况下就是 undefined\\n\\n## 情景2\\n\\n```\\n  let Vue = {\\n    version: '1.0.0',\\n    getVersion: function () {\\n      console.log(this); // window\\n      console.log(this.version); // undefined\\n    },\\n  };\\n  let getVersion = Vue.getVersion\\n  getVersion();\\n```\\nthis 指向的时 window 对象 ，虽然 getVersion 方法定义是在 Vue 对象中，但是其执行环境是在 window 中，因此输出 window 和 undefined ，要想使 this 指向 Vue, 就要通过对象去直接调用。\\n\\n   例如：\\n ```\\n  Vue.getVersion()\\n ```\\n\\n## 情景3\\n\\n```\\n  let Vue1 = {\\n    version: '1.0.1',\\n    getVersion: function () {\\n      return this.version;\\n    },\\n  };\\n\\n  let Vue2 = {\\n    version: '1.0.2',\\n    getVersion: function () {\\n      return Vue1.getVersion();\\n    },\\n  };\\n\\n  let Vue3 = {\\n    version: '1.0.3',\\n    getVersion: function () {\\n      let getVersion = Vue1.getVersion;\\n      return getVersion();\\n    },\\n  };\\n\\n  Vue1.getVersion(); // 1.0.1\\n  Vue2.getVersion(); // 1.0.2\\n  Vue3.getVersion(); // undefined\\n```\\n\\n+ 第一个 console 最简单，输出 1.0.1 \\n+ 第二个 console 的 Vue2.getVersion()，最终还是调用 Vue1.getVersion()，因此答案仍然是 1.0.1\\n+ 第三个 在进行 var getVersion = Vue1.getVersion 赋值之后，把 getVersion 暴露到了全局，因此这里的 this 指向 window，所以输入 undefined\\n\\n## 情景4\\n```\\nvar name = 'window'\\nlet person = {\\n    name: 'person',\\n    sayName: function() {\\n        return function() {\\n            return this.name\\n        }\\n    }\\n}\\n\\nconsole.log(person.sayName()()) // window\\n```\\n\\n因为 \\n\\n```\\nlet before = preson.sayName() // 相当于的全局定义了一个函数\\nbefore() // before执行的时候，又因为在全局使用 var 定义变量，相当于绑定在 window 上， 所以window.name 会得到 window \\n\\n```\",\r\n\t\t\ttag_ids: '[\"6809637767543259144\"]',\r\n\t\t\ttitle: 'JavaScript 中的 this',\r\n\t\t\tarticle_id: 'd6d0aa61938aef07bda83c234fe3d22a',\r\n\t\t\tcreate_time: '1611815909000',\r\n\t\t\tupdate_time: '1611824391000',\r\n\t\t\treference: null,\r\n\t\t},\r\n\t\t{ id: 18, rief_content: 'call、apply、bind的作用是改变函数运行时this的指向。\\n\\n', category_id: '', cover_image: '', edit_type: '', html_content: '<p>1</p>\\n', is_english: '', is_gfw: '', is_original: '1', link_url: '', mark_content: '## 序言\\n不知其理，何以谈用，在这里简单记录一下个人对call、apply、bind的理解，并根据理解思路实现一下。\\n\\n## call 方法\\n使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数\\n```\\n// 开发中....\\n\\n```', tag_ids: '[\"6809637769959178254\"]', title: 'call、apply、bind的原理剖析及实现', article_id: 'd8ddd5ac05c3838e951e39d2b96b9b58', create_time: '1611791690000', update_time: '1611825000000', reference: null },\r\n\t\t{\r\n\t\t\tid: 14,\r\n\t\t\trief_content: '服务端渲染是将组件或页面通过服务器生成html字符串，再发送到浏览器，最后将静态标记\"混合\"为客户端上完全交互的应用程序，而客户端渲染则是通过接口去请求数据，根据接口的数据动态生成Dom节点，再呈现到用户面前所以白屏时间会很长，且对SEO不友好...',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content:\r\n\t\t\t\t'<h1><a id=\"_0\"></a>概念</h1>\\n<p>SSR(Server Side Rendering) ：DOM树在服务端生成，而后返回给前端。即当前页面的内容是服务器生成好一次性给到浏览器的进行渲染的</p>\\n<p>CSR(Client Side Rendering)：是SPA的方式，渲染过程全部交给浏览器进行处理，服务器不参与任何渲染。页面初始加载的HTML文档中无内容，需要下载执行JS文件，由浏览器动态生成页面，并通过JS进行页面交互事件与状态管理</p>\\n<ul>\\n<li>\\n<p>CSR的方式 =&gt; 当请求某一个地址时，响应的preview里为空，之后执行[bundle].js,通过将js 相应回来的数据，再去拼接html结构，动态生成html节点，结合css显示出来；</p>\\n</li>\\n<li>\\n<p>SSR的方式 =&gt; 当请求某一个地址时，返回的preview里已经有了首屏的html结构，之后结合css显示出来</p>\\n</li>\\n</ul>\\n<p>所以ssr与csr的区别就是数据拼接HTML字符串这件事放在服务端还是客户端</p>\\n<h2><a id=\"SSR_11\"></a>使用SSR的利弊</h2>\\n<p>SSR的利弊</p>\\n<ul>\\n<li>\\n<p>更利于SEO。</p>\\n<ul>\\n<li>主流的SPA框架，都是先加载[bundle]js,再根据js动态渲染html节点,所以会有延迟，而SEO，对大多数搜索引擎，不识别JavaScript 内容，只识别 HTML 内容，SSR技术，在服务器就已经生成好了html代码，当用户访问该域名时，返回的生成好的html节点，</li>\\n</ul>\\n</li>\\n<li>\\n<p>更利于首屏渲染</p>\\n<ul>\\n<li>首屏的渲染是node发送过来的html字符串，并不依赖于js文件了，这就会使用户更快的看到页面的内容。尤其是针对大型单页应用，打包后文件体积比较大，普通客户端渲染加载所有所需文件时间较长，首页就会有一个很长的白屏等待时间。</li>\\n</ul>\\n</li>\\n<li>\\n<p>更有利于加载</p>\\n<ul>\\n<li>后端生成静态化文件。即生成缓存片段，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效</li>\\n</ul>\\n</li>\\n<li>\\n<p>SSR的局限</p>\\n<ul>\\n<li>服务端压力较大，本来是通过客户端完成渲染，现在统一到服务端node服务去做。尤其是高并发访问的情况，会大量占用服务端CPU资源；</li>\\n</ul>\\n</li>\\n<li>\\n<p>开发条件受限</p>\\n<ul>\\n<li>在服务端渲染中，只会执行到componentDidMount之前的生命周期钩子，因此项目引用的第三方的库也不可用其它生命周期钩子，这对引用库的选择产生了很大的限制；</li>\\n</ul>\\n</li>\\n<li>\\n<p>学习成本相对较高</p>\\n<ul>\\n<li>除了对webpack、React要熟悉，还需要掌握node、Koa2、express等相关技术。相对于客户端渲染，项目构建、部署过程更加复杂。</li>\\n</ul>\\n<h1><a id=\"CSR_32\"></a>CSR的利弊</h1>\\n<ul>\\n<li>不利于SEO–，对大多数搜索引擎，不识别JavaScript 内容，只识别 HTML 内容</li>\\n<li>整体加载完速度慢，从发送求请求到响应回来，再去动态渲染节点，白屏时间过长</li>\\n<li>降低服务器压力， 渲染的工作全部由客户端处理</li>\\n<li>客户端兼容性有可能不太好</li>\\n</ul>\\n</li>\\n</ul>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t'# 概念\\nSSR(Server Side Rendering) ：DOM树在服务端生成，而后返回给前端。即当前页面的内容是服务器生成好一次性给到浏览器的进行渲染的\\n\\nCSR(Client Side Rendering)：是SPA的方式，渲染过程全部交给浏览器进行处理，服务器不参与任何渲染。页面初始加载的HTML文档中无内容，需要下载执行JS文件，由浏览器动态生成页面，并通过JS进行页面交互事件与状态管理\\n\\n+ CSR的方式 => 当请求某一个地址时，响应的preview里为空，之后执行[bundle].js,通过将js 相应回来的数据，再去拼接html结构，动态生成html节点，结合css显示出来；\\n\\n+ SSR的方式 => 当请求某一个地址时，返回的preview里已经有了首屏的html结构，之后结合css显示出来\\n\\n所以ssr与csr的区别就是数据拼接HTML字符串这件事放在服务端还是客户端\\n\\n## 使用SSR的利弊\\nSSR的利弊\\n+ 更利于SEO。\\n  - 主流的SPA框架，都是先加载[bundle]js,再根据js动态渲染html节点,所以会有延迟，而SEO，对大多数搜索引擎，不识别JavaScript 内容，只识别 HTML 内容，SSR技术，在服务器就已经生成好了html代码，当用户访问该域名时，返回的生成好的html节点，\\n\\n+ 更利于首屏渲染\\n\\n  - 首屏的渲染是node发送过来的html字符串，并不依赖于js文件了，这就会使用户更快的看到页面的内容。尤其是针对大型单页应用，打包后文件体积比较大，普通客户端渲染加载所有所需文件时间较长，首页就会有一个很长的白屏等待时间。\\n+ 更有利于加载\\n  - 后端生成静态化文件。即生成缓存片段，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 \\n\\n+ SSR的局限\\n  - 服务端压力较大，本来是通过客户端完成渲染，现在统一到服务端node服务去做。尤其是高并发访问的情况，会大量占用服务端CPU资源；\\n\\n+ 开发条件受限\\n  - 在服务端渲染中，只会执行到componentDidMount之前的生命周期钩子，因此项目引用的第三方的库也不可用其它生命周期钩子，这对引用库的选择产生了很大的限制；\\n\\n+ 学习成本相对较高\\n  - 除了对webpack、React要熟悉，还需要掌握node、Koa2、express等相关技术。相对于客户端渲染，项目构建、部署过程更加复杂。\\n\\n\\n  # CSR的利弊\\n\\n  + 不利于SEO–，对大多数搜索引擎，不识别JavaScript 内容，只识别 HTML 内容\\n  + 整体加载完速度慢，从发送求请求到响应回来，再去动态渲染节点，白屏时间过长\\n  + 降低服务器压力， 渲染的工作全部由客户端处理\\n  + 客户端兼容性有可能不太好',\r\n\t\t\ttag_ids: '[\"6809637767543259144\"]',\r\n\t\t\ttitle: 'ssr vs csr',\r\n\t\t\tarticle_id: 'c32d39b078ba64ccb0efb4bcf6d2c5d7',\r\n\t\t\tcreate_time: '1611730768000',\r\n\t\t\tupdate_time: '1539187200000',\r\n\t\t\treference: null,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 11,\r\n\t\t\trief_content: '纯函数是所有函数式编程语言中使用的概念，这是一个非常重要的概念，因为它是函数式编程的基础，它允许你创建简单和复杂的组合模式。',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content:\r\n\t\t\t\t'<h1><a id=\"_0\"></a>纯函数定义</h1>\\n<p>函数的返回结果只依赖于它的参数，并且在执行过程里面没有副作用</p>\\n<p>例如：</p>\\n<pre><code class=\"lang-\">function foo(x, b) {\\n  return x + y\\n}\\n</code></pre>\\n<p>现在 foo 的返回结果只依赖于它的参数 x 和 b，foo(1, 2) 永远是 3。今天是 3，明天也是 3，在服务器跑是 3，在客户端跑也 3，不管你外部发生了什么变化，foo(1, 2) 永远是 3。只要 foo 代码不改变，你传入的参数是确定的，那么 foo(1, 2) 的值永远是可预料的。</p>\\n<p>这就是纯函数的第一个条件：函数的返回结果只依赖于它的参数</p>\\n<p>函数执行过程没有副作用<br />\\n函数执行过程对产生了外部可观察的变化那么就说这个函数是有副作用的。</p>\\n<pre><code class=\"lang-\">const a = 1\\nconst foo = (obj, b) =&gt; {\\n  return obj.x + b\\n}\\nconst user = { age: 1 }\\nfoo(user, 2) // =&gt; 3\\nuser.age // =&gt; 1\\n</code></pre>\\n<p>我们把原来的 x 换成了 obj，我现在可以往里面传一个对象进行计算，计算的过程里面并不会对传入的对象进行修改，计算前后的 user 不会发生任何变化，计算前是 1，计算后也是 1，它现在是纯的。但是我再稍微修改一下它：</p>\\n<pre><code class=\"lang-const\">const foo = (obj, b) =&gt; {\\n  obj.age = 28\\n  return obj.x + b\\n}\\nconst user = { age: 1 }\\nfoo(user, 2) // =&gt; 4\\nuser.x // =&gt; 2\\n</code></pre>\\n<p>现在情况发生了变化，我在 foo 内部加了一句 obj.x = 2，计算前 user.x 是 1，但是计算以后 user.x 是 2。foo 函数的执行对外部的 user 产生了影响，它产生了副作用，因为它修改了外部传进来的对象，现在它是不纯的。</p>\\n<p>但是你在函数内部构建的变量，然后进行数据的修改不是副作用：</p>\\n<pre><code class=\"lang-\">const foo = (b) =&gt; {\\n  const obj = { x: 1 }\\n  obj.x = 2\\n  return obj.x + b\\n}\\n</code></pre>\\n<p>虽然 foo 函数内部修改了 obj，但是 obj 是内部变量，外部程序根本观察不到，修改 obj 并不会产生外部可观察的变化，这个函数是没有副作用的，因此它是一个纯函数。</p>\\n<hr />\\n<pre><code class=\"lang-\">function getDouble(num: number): number {\\n  return num * 2\\n}\\n</code></pre>\\n<p>getDouble 函数不是一个纯函数，因为它返回的结果并不等于输入的结果，我们在不知道 num 的值的情况下，并不能保证 getDouble(2) 的返回值是 3。虽然 getDouble 函数的代码实现并没有变化，传入的参数也没有变化，但它的返回值却是不可预料的，现在 getDouble(2) 是 3，可能过了一会就是 4 了，因为 a 可能发生了变化变成了 2。</p>\\n<h1><a id=\"_59\"></a>纯函数的好处</h1>\\n<p>为什么要煞费苦心地构建纯函数？因为纯函数非常“靠谱”，执行一个纯函数你不用担心它会干什么坏事，它不会产生不可预料的行为，也不会对外部产生影响。不管何时何地，你给它什么它就会乖乖地吐出什么。如果你的应用程序大多数函数都是由纯函数组成，那么你的程序测试、调试起来会非常方便。</p>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t'# 纯函数定义\\n函数的返回结果只依赖于它的参数，并且在执行过程里面没有副作用\\n\\n \\n例如：\\n\\n```\\nfunction foo(x, b) {\\n  return x + y\\n}\\n```\\n现在 foo 的返回结果只依赖于它的参数 x 和 b，foo(1, 2) 永远是 3。今天是 3，明天也是 3，在服务器跑是 3，在客户端跑也 3，不管你外部发生了什么变化，foo(1, 2) 永远是 3。只要 foo 代码不改变，你传入的参数是确定的，那么 foo(1, 2) 的值永远是可预料的。\\n\\n这就是纯函数的第一个条件：函数的返回结果只依赖于它的参数\\n\\n函数执行过程没有副作用\\n函数执行过程对产生了外部可观察的变化那么就说这个函数是有副作用的。\\n~~~\\nconst a = 1\\nconst foo = (obj, b) => {\\n  return obj.x + b\\n}\\nconst user = { age: 1 }\\nfoo(user, 2) // => 3\\nuser.age // => 1\\n~~~\\n\\n我们把原来的 x 换成了 obj，我现在可以往里面传一个对象进行计算，计算的过程里面并不会对传入的对象进行修改，计算前后的 user 不会发生任何变化，计算前是 1，计算后也是 1，它现在是纯的。但是我再稍微修改一下它：\\n\\n~~~const a = 1\\nconst foo = (obj, b) => {\\n  obj.age = 28\\n  return obj.x + b\\n}\\nconst user = { age: 1 }\\nfoo(user, 2) // => 4\\nuser.x // => 2\\n~~~\\n\\n现在情况发生了变化，我在 foo 内部加了一句 obj.x = 2，计算前 user.x 是 1，但是计算以后 user.x 是 2。foo 函数的执行对外部的 user 产生了影响，它产生了副作用，因为它修改了外部传进来的对象，现在它是不纯的。\\n\\n但是你在函数内部构建的变量，然后进行数据的修改不是副作用：\\n~~~\\nconst foo = (b) => {\\n  const obj = { x: 1 }\\n  obj.x = 2\\n  return obj.x + b\\n}\\n~~~\\n虽然 foo 函数内部修改了 obj，但是 obj 是内部变量，外部程序根本观察不到，修改 obj 并不会产生外部可观察的变化，这个函数是没有副作用的，因此它是一个纯函数。\\n\\n---\\n```\\nfunction getDouble(num: number): number {\\n  return num * 2\\n}\\n```\\ngetDouble 函数不是一个纯函数，因为它返回的结果并不等于输入的结果，我们在不知道 num 的值的情况下，并不能保证 getDouble(2) 的返回值是 3。虽然 getDouble 函数的代码实现并没有变化，传入的参数也没有变化，但它的返回值却是不可预料的，现在 getDouble(2) 是 3，可能过了一会就是 4 了，因为 a 可能发生了变化变成了 2。\\n',\r\n\t\t\ttag_ids: '[\"6809637767543259144\"]',\r\n\t\t\ttitle: '纯函数, 函数式编程的基础',\r\n\t\t\tarticle_id: '186c07c6c070ae2e25abfc855cf1c9b4',\r\n\t\t\tcreate_time: '1611157938494',\r\n\t\t\tupdate_time: '1539187200000',\r\n\t\t\treference: null,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 9,\r\n\t\t\trief_content: 'Express.js是一个轻量且灵活的Node.js WEB应用框架，可以快速搭建WEB应用。其底层是对Node.js的HTTP模块进行封装，增加路由、中间件等特性，使得用户能搭建应用级别的WEB服务',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content:\r\n\t\t\t\t'<h1><a id=\"RESTful_0\"></a>RESTful服务</h1>\\n<p>REST(Representational State Transfer)的意思是表征状态转移，它是一种基于HTTP协议的网络应用接口风格，充分利用HTTP的方法实现统一风格接口的服务。通过动词（HTTP方法）+名词（请求资源的接口路径）的方式请求资源，赋予接口特定的含义。</p>\\n<p>REST风格定义了一系列创建HTTP服务的惯例：</p>\\n<ul>\\n<li>POST：创建资源</li>\\n<li>PUT：更新资源</li>\\n<li>GET：读取资源</li>\\n<li>DELETE：删除资源</li>\\n</ul>\\n<p>例如：</p>\\n<ol>\\n<li>获取所有书籍记录： GET=&gt; /api/books</li>\\n<li>获取id为1的书籍： GET =&gt; /api/books/1</li>\\n<li>更新id为1的书籍：PUT =&gt; /api/books/1</li>\\n<li>删除id为1的书籍：DELETE =&gt; /api/books/1</li>\\n<li>创建一条书籍记录：POST =&gt; /api/books</li>\\n</ol>\\n<h4><a id=\"Express__RESTful_API_18\"></a>Express 构建 RESTful API</h4>\\n<p>Express.js是一个轻量且灵活的Node.js WEB应用框架，可以快速搭建WEB应用。其底层是对Node.js的HTTP模块进行封装，增加路由、中间件等特性，使得用户能搭建应用级别的WEB服务。接下来我们就来尝试下一下编辑的的接口，不再需要依赖后端了。</p>\\n<ol>\\n<li>首先要先创建一个工程目录`` 按住键盘 win+r 打开运行命令弹窗，输入 cmd， 回车进入命令行<br />\\n安装express，并新建一个新的express项目</li>\\n<li>选择一个自己磁盘的目录，创建一个工程目录，比如 <code>mkdir camp-express &amp;&amp; cd camp-express</code>, 创建一个工程目录并进入该工程。</li>\\n<li>初始化该工程 <code>npm init -y</code> 之后会生成一个 package.json 文件。</li>\\n</ol>\\n<pre><code class=\"lang-\">{\\n  &quot;name&quot;: &quot;camp-express&quot;,\\n  &quot;version&quot;: &quot;1.0.0&quot;,\\n  &quot;description&quot;: &quot;&quot;,\\n  &quot;main&quot;: &quot;index.js&quot;,\\n  &quot;scripts&quot;: {\\n    &quot;test&quot;: &quot;echo \\\\&quot;Error: no test specified\\\\&quot; &amp;&amp; exit 1&quot;\\n  },\\n  &quot;keywords&quot;: [],\\n  &quot;author&quot;: &quot;&quot;,\\n  &quot;license&quot;: &quot;ISC&quot;\\n}\\n\\n</code></pre>\\n<ol start=\"4\">\\n<li>我们创建如下开发目录：</li>\\n</ol>\\n<pre><code class=\"lang-\">&gt; camp-express\\n &gt; router \\n &gt; src\\n &gt; public \\n  .gitignore\\n  .prettierrc\\n  package.json\\n</code></pre>\\n<p>现在安装项目需要的依赖：</p>\\n<pre><code class=\"lang-\">$ npm install -g express body-parser\\n</code></pre>\\n<pre><code class=\"lang-\">{\\n  &quot;name&quot;: &quot;camp-express&quot;,\\n  &quot;version&quot;: &quot;1.0.0&quot;,\\n  &quot;description&quot;: &quot;&quot;,\\n  &quot;main&quot;: &quot;index.js&quot;,\\n  &quot;scripts&quot;: {\\n    &quot;test&quot;: &quot;echo \\\\&quot;Error: no test specified\\\\&quot; &amp;&amp; exit 1&quot;\\n  },\\n  &quot;keywords&quot;: [],\\n  &quot;author&quot;: &quot;&quot;,\\n  &quot;license&quot;: &quot;ISC&quot;,\\n  &quot;dependencies&quot;: {\\n    &quot;body-parser&quot;: &quot;^1.19.0&quot;,\\n    &quot;express&quot;: &quot;^4.17.1&quot;\\n  }\\n}\\n</code></pre>\\n<p>我们先来打开 app.js 创建的 express 的应用</p>\\n<pre><code class=\"lang-\">// 引入express框架\\nvar express = require(\\'express\\');\\n// 创建网站服务器\\nvar app = express();\\n// create application/json parser\\nvar bodyParser = require(\\'body-parser\\')\\n// create application/x-www-form-urlencoded parser\\napp.use(bodyParser.urlencoded({ extended: false}))\\napp.use(bodyParser.json())\\n\\n// 服务器监听6000端口\\napp.listen(6000, function () {\\n  console.log(\\'Example app listening on port 6000!\\')\\n})\\n</code></pre>\\n<p>修改一下 <code>package.json</code> 文件</p>\\n<pre><code class=\"lang-\">{\\n  &quot;name&quot;: &quot;camp-express&quot;,\\n  &quot;version&quot;: &quot;1.0.0&quot;,\\n  &quot;description&quot;: &quot;&quot;,\\n  &quot;main&quot;: &quot;index.js&quot;,\\n  &quot;scripts&quot;: {\\n    &quot;start&quot;: &quot;nodemon src/app.js&quot;,\\n    &quot;test&quot;: &quot;echo \\\\&quot;Error: no test specified\\\\&quot; &amp;&amp; exit 1&quot;\\n  },\\n  &quot;keywords&quot;: [],\\n  &quot;author&quot;: &quot;&quot;,\\n  &quot;license&quot;: &quot;ISC&quot;,\\n  &quot;dependencies&quot;: {\\n    &quot;body-parser&quot;: &quot;^1.19.0&quot;,\\n    &quot;express&quot;: &quot;^4.17.1&quot;\\n  }\\n}\\n</code></pre>\\n<p>现在启动一下这个服务 命令行中输入 <code>yarn start</code></p>\\n<pre><code class=\"lang-\">D:\\\\github\\\\camp-express&gt;yarn start \\nyarn run v1.22.10\\n$ nodemon src/app.js\\n[nodemon] 2.0.6\\n[nodemon] to restart at any time, enter `rs`\\n[nodemon] watching path(s): *.*\\n[nodemon] watching extensions: js,mjs,json  \\n[nodemon] starting `node src/app.js`        \\nhttp://127.0.0.1:6000\\n</code></pre>\\n<p>现在创建我们的书籍路由，进入router目录 <code>cd router</code>, 编辑 books.js 文件</p>\\n<pre><code class=\"lang-var\">var router = express.Router()\\n\\nconst books = [\\n  { id: 1, name: \\'book1\\' },\\n  { id: 2, name: \\'book2\\' },\\n  { id: 3, name: \\'book3\\' },\\n]\\n\\nrouter.get(\\'/books\\', function (req, res) {\\n  res.json(books)\\n})\\n\\nrouter.get(\\'/books/:id\\', function (req, res) {\\n  let book = books.find((b) =&gt; b.id === parseInt(req.params.id))\\n  if (!book){\\n    return res.status(404).json({ msg: \\'The book with the given ID not find.\\' })\\n  }\\n  res.json(book)\\n})\\n\\nmodule.exports = router //暴露这个 router模块\\n</code></pre>\\n<p>回到我们的 <code>app.js</code>, 引入我们刚才编辑的 <code>books.js</code></p>\\n<pre><code class=\"lang-\">+ var booksRouter = require(\\'../router/books\\')\\n+ app.use(\\'/api\\', booksRouter)\\n</code></pre>\\n<p>处理GET请求</p>\\n<p>测试一下我们的接口是否能跑通</p>\\n<pre><code class=\"lang-\">Microsoft Windows [版本 10.0.18363.1316]\\n(c) 2019 Microsoft Corporation。保留所有权利。\\n\\nD:\\\\github\\\\camp-express&gt;curl http://127.0.0.1:6000/api/books // 获取书籍列表\\n[{&quot;id&quot;:1,&quot;name&quot;:&quot;book1&quot;},{&quot;id&quot;:2,&quot;name&quot;:&quot;book2&quot;},{&quot;id&quot;:3,&quot;name&quot;:&quot;book3&quot;}]\\n</code></pre>\\n<p>所以我们的获取列表数据接口也是成功的</p>\\n<pre><code class=\"lang-\">D:\\\\github\\\\camp-express&gt;curl http://127.0.0.1:6000/api/books/2 // 获取id为2书籍\\n{&quot;id&quot;:2,&quot;name&quot;:&quot;book2&quot;}\\n\\nD:\\\\github\\\\camp-express&gt;curl http://127.0.0.1:6000/api/books/5 // 获取id为5的书籍        \\n{&quot;msg&quot;:&quot;The book with the given ID not find.&quot;}\\n</code></pre>\\n<p>处理POST请求</p>\\n<p>现在编辑我们的 <code>books.js</code> 文件</p>\\n<pre><code class=\"lang-\">// 使用POST方法添加书籍\\n+ router.post(\\'/books\\', function (req, res) {\\n+   const {name} = req.body;\\n+   if (name){\\n+     return res.status(400).json({ msg: \\'参数name不能为空~\\' }).end()\\n+   }\\n+   const book = {\\n+       id: books.length + 1,\\n+        name\\n+   };\\n+   books.push(book);\\n+   res.json(book).end();\\n+ })\\n\\n</code></pre>\\n<p>测试一下我们的新增接口</p>\\n<pre><code class=\"lang-\">D:\\\\github\\\\camp-express&gt;curl -X POST -s &quot;http://localhost:6000/api/books&quot; -d &quot;name=xiaoshubao&quot; curl -X POST -s &quot;http://localhost:6000/api/books&quot; -d &quot;name=xiaoshubao&quot; // 新增一条\\n数据\\n{&quot;id&quot;:4,&quot;name&quot;:[&quot;xiaoshubao&quot;,&quot;xiaoshubao&quot;]}{&quot;id&quot;:5,&quot;name&quot;:[&quot;xiaoshubao&quot;,&quot;xiaoshubao&quot;]}\\n</code></pre>\\n<p>处理PUT请求</p>\\n<pre><code class=\"lang-\">+ // 使用PUT方法修改书籍\\n+ router.put(\\'/books/:id\\', (req, res) =&gt; {\\n+   let book = books.find((b) =&gt; b.id === parseInt(req.params.id))\\n+   const { name } = req.body\\n+   if (!book){\\n+       return res.status(404).json({ msg: \\'The book with the given ID not find.\\' })\\n+    }     \\n+    if (!name) {\\n+       return res.status(400).json({ msg: \\'参数name不能为空~\\' }).end()\\n+    }\\n+   book.name = name\\n+   res.json(book).end()\\n+ })\\n</code></pre>\\n<p>测试PUT方法</p>\\n<pre><code class=\"lang-\">D:\\\\github\\\\camp-express&gt;curl -X PUT -s &quot;http://localhost:6000/api/books/1&quot; -d &quot;name=change&quot; // 测试修改\\n{&quot;id&quot;:1,&quot;name&quot;:&quot;change&quot;}\\n</code></pre>\\n<p>处理DELETE</p>\\n<pre><code class=\"lang-\">+ // 使用DELETE方法删除书籍\\n+  router.delete(\\'/books/:id\\', (req, res) =&gt; {\\n+   let book = books.find((b) =&gt; b.id === parseInt(req.params.id))\\n+   if (!book) {\\n+      return res.status(404).json({ msg: \\'The book with the given ID not find.\\' })\\n+    }\\n+    const index = books.indexOf(book)\\n+    books.splice(index, 1)\\n+    res.json(book).end()\\n+  })\\n</code></pre>\\n<p>测试我们的删除接口</p>\\n<pre><code class=\"lang-\">D:\\\\github\\\\camp-express&gt;curl -X DELETE -s &quot;http://localhost:6000/api/books/1&quot; // 测试删除\\n{&quot;id&quot;:1,&quot;name&quot;:&quot;book1&quot;}\\n</code></pre>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t'# RESTful服务\\n\\n REST(Representational State Transfer)的意思是表征状态转移，它是一种基于HTTP协议的网络应用接口风格，充分利用HTTP的方法实现统一风格接口的服务。通过动词（HTTP方法）+名词（请求资源的接口路径）的方式请求资源，赋予接口特定的含义。\\n\\n REST风格定义了一系列创建HTTP服务的惯例：\\n  -  POST：创建资源\\n  -  PUT：更新资源\\n  -  GET：读取资源\\n  -  DELETE：删除资源\\n  \\n例如：\\n\\n1. 获取所有书籍记录： GET=> /api/books\\n2. 获取id为1的书籍： GET => /api/books/1\\n3. 更新id为1的书籍：PUT => /api/books/1\\n4. 删除id为1的书籍：DELETE => /api/books/1\\n5. 创建一条书籍记录：POST => /api/books\\n\\n#### Express 构建 RESTful API\\n Express.js是一个轻量且灵活的Node.js WEB应用框架，可以快速搭建WEB应用。其底层是对Node.js的HTTP模块进行封装，增加路由、中间件等特性，使得用户能搭建应用级别的WEB服务。接下来我们就来尝试下一下编辑的的接口，不再需要依赖后端了。\\n\\n1. 首先要先创建一个工程目录`` 按住键盘 win+r 打开运行命令弹窗，输入 cmd， 回车进入命令行\\n安装express，并新建一个新的express项目\\n2. 选择一个自己磁盘的目录，创建一个工程目录，比如 `mkdir camp-express && cd camp-express`, 创建一个工程目录并进入该工程。\\n3. 初始化该工程 `npm init -y` 之后会生成一个 package.json 文件。\\n```\\n{\\n  \"name\": \"camp-express\",\\n  \"version\": \"1.0.0\",\\n  \"description\": \"\",\\n  \"main\": \"index.js\",\\n  \"scripts\": {\\n    \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\"\\n  },\\n  \"keywords\": [],\\n  \"author\": \"\",\\n  \"license\": \"ISC\"\\n}\\n\\n```\\n \\n4. 我们创建如下开发目录：\\n```\\n> camp-express\\n > router \\n > src\\n > public \\n  .gitignore\\n  .prettierrc\\n  package.json\\n```\\n\\n现在安装项目需要的依赖：\\n```\\n$ npm install -g express body-parser\\n```\\n\\n```\\n{\\n  \"name\": \"camp-express\",\\n  \"version\": \"1.0.0\",\\n  \"description\": \"\",\\n  \"main\": \"index.js\",\\n  \"scripts\": {\\n    \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\"\\n  },\\n  \"keywords\": [],\\n  \"author\": \"\",\\n  \"license\": \"ISC\",\\n  \"dependencies\": {\\n    \"body-parser\": \"^1.19.0\",\\n    \"express\": \"^4.17.1\"\\n  }\\n}\\n```\\n\\n我们先来打开 app.js 创建的 express 的应用\\n```\\n// 引入express框架\\nvar express = require(\\'express\\');\\n// 创建网站服务器\\nvar app = express();\\n// create application/json parser\\nvar bodyParser = require(\\'body-parser\\')\\n// create application/x-www-form-urlencoded parser\\napp.use(bodyParser.urlencoded({ extended: false}))\\napp.use(bodyParser.json())\\n\\n// 服务器监听6000端口\\napp.listen(6000, function () {\\n  console.log(\\'Example app listening on port 6000!\\')\\n})\\n```\\n\\n修改一下 `package.json` 文件\\n```\\n{\\n  \"name\": \"camp-express\",\\n  \"version\": \"1.0.0\",\\n  \"description\": \"\",\\n  \"main\": \"index.js\",\\n  \"scripts\": {\\n    \"start\": \"nodemon src/app.js\",\\n    \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\"\\n  },\\n  \"keywords\": [],\\n  \"author\": \"\",\\n  \"license\": \"ISC\",\\n  \"dependencies\": {\\n    \"body-parser\": \"^1.19.0\",\\n    \"express\": \"^4.17.1\"\\n  }\\n}\\n```\\n\\n现在启动一下这个服务 命令行中输入 `yarn start`\\n```\\nD:\\\\github\\\\camp-express>yarn start \\nyarn run v1.22.10\\n$ nodemon src/app.js\\n[nodemon] 2.0.6\\n[nodemon] to restart at any time, enter `rs`\\n[nodemon] watching path(s): *.*\\n[nodemon] watching extensions: js,mjs,json  \\n[nodemon] starting `node src/app.js`        \\nhttp://127.0.0.1:6000\\n```\\n\\n现在创建我们的书籍路由，进入router目录 `cd router`, 编辑 books.js 文件\\n\\n```var express = require(\\'express\\')\\nvar router = express.Router()\\n\\nconst books = [\\n  { id: 1, name: \\'book1\\' },\\n  { id: 2, name: \\'book2\\' },\\n  { id: 3, name: \\'book3\\' },\\n]\\n\\nrouter.get(\\'/books\\', function (req, res) {\\n  res.json(books)\\n})\\n\\nrouter.get(\\'/books/:id\\', function (req, res) {\\n  let book = books.find((b) => b.id === parseInt(req.params.id))\\n  if (!book){\\n    return res.status(404).json({ msg: \\'The book with the given ID not find.\\' })\\n  }\\n  res.json(book)\\n})\\n\\nmodule.exports = router //暴露这个 router模块\\n```\\n\\n回到我们的 `app.js`, 引入我们刚才编辑的 `books.js`\\n\\n\\n```\\n+ var booksRouter = require(\\'../router/books\\')\\n+ app.use(\\'/api\\', booksRouter)\\n```\\n\\n处理GET请求\\n\\n测试一下我们的接口是否能跑通\\n```\\nMicrosoft Windows [版本 10.0.18363.1316]\\n(c) 2019 Microsoft Corporation。保留所有权利。\\n\\nD:\\\\github\\\\camp-express>curl http://127.0.0.1:6000/api/books // 获取书籍列表\\n[{\"id\":1,\"name\":\"book1\"},{\"id\":2,\"name\":\"book2\"},{\"id\":3,\"name\":\"book3\"}]\\n```\\n所以我们的获取列表数据接口也是成功的\\n\\n\\n```\\nD:\\\\github\\\\camp-express>curl http://127.0.0.1:6000/api/books/2 // 获取id为2书籍\\n{\"id\":2,\"name\":\"book2\"}\\n\\nD:\\\\github\\\\camp-express>curl http://127.0.0.1:6000/api/books/5 // 获取id为5的书籍        \\n{\"msg\":\"The book with the given ID not find.\"}\\n```\\n\\n处理POST请求\\n\\n现在编辑我们的 `books.js` 文件\\n```\\n// 使用POST方法添加书籍\\n+ router.post(\\'/books\\', function (req, res) {\\n+   const {name} = req.body;\\n+   if (name){\\n+     return res.status(400).json({ msg: \\'参数name不能为空~\\' }).end()\\n+   }\\n+   const book = {\\n+       id: books.length + 1,\\n+        name\\n+   };\\n+   books.push(book);\\n+   res.json(book).end();\\n+ })\\n\\n```\\n\\n测试一下我们的新增接口\\n```\\nD:\\\\github\\\\camp-express>curl -X POST -s \"http://localhost:6000/api/books\" -d \"name=xiaoshubao\" curl -X POST -s \"http://localhost:6000/api/books\" -d \"name=xiaoshubao\" // 新增一条\\n数据\\n{\"id\":4,\"name\":[\"xiaoshubao\",\"xiaoshubao\"]}{\"id\":5,\"name\":[\"xiaoshubao\",\"xiaoshubao\"]}\\n```\\n\\n处理PUT请求\\n\\n```\\n+ // 使用PUT方法修改书籍\\n+ router.put(\\'/books/:id\\', (req, res) => {\\n+   let book = books.find((b) => b.id === parseInt(req.params.id))\\n+   const { name } = req.body\\n+   if (!book){\\n+       return res.status(404).json({ msg: \\'The book with the given ID not find.\\' })\\n+    }     \\n+    if (!name) {\\n+       return res.status(400).json({ msg: \\'参数name不能为空~\\' }).end()\\n+    }\\n+   book.name = name\\n+   res.json(book).end()\\n+ })\\n```\\n\\n测试PUT方法\\n```\\nD:\\\\github\\\\camp-express>curl -X PUT -s \"http://localhost:6000/api/books/1\" -d \"name=change\" // 测试修改\\n{\"id\":1,\"name\":\"change\"}\\n```\\n\\n处理DELETE\\n```\\n+ // 使用DELETE方法删除书籍\\n+  router.delete(\\'/books/:id\\', (req, res) => {\\n+   let book = books.find((b) => b.id === parseInt(req.params.id))\\n+   if (!book) {\\n+      return res.status(404).json({ msg: \\'The book with the given ID not find.\\' })\\n+    }\\n+    const index = books.indexOf(book)\\n+    books.splice(index, 1)\\n+    res.json(book).end()\\n+  })\\n```\\n\\n测试我们的删除接口\\n```\\nD:\\\\github\\\\camp-express>curl -X DELETE -s \"http://localhost:6000/api/books/1\" // 测试删除\\n{\"id\":1,\"name\":\"book1\"}\\n```',\r\n\t\t\ttag_ids: '[\"6809637769959178254\",\"6809637767543259144\",\"6809635626879549454\"]',\r\n\t\t\ttitle: '使用Express构建你的RESTful API',\r\n\t\t\tarticle_id: 'b635e22b393c87b4d45630846fc6f237',\r\n\t\t\tcreate_time: '1611151759183',\r\n\t\t\tupdate_time: '1539187200000',\r\n\t\t\treference: null,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 8,\r\n\t\t\trief_content: 'npm install 命令用来安装模块到node_modules目录。 安装之前，npm install会先检查，node_modules目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。 如果想更新已安装模块，就要用到npm…',\r\n\t\t\tcategory_id: '',\r\n\t\t\tcover_image: '',\r\n\t\t\tedit_type: '',\r\n\t\t\thtml_content:\r\n\t\t\t\t'<h1><a id=\"npm_1\"></a>npm是什么</h1>\\n<blockquote>\\n<p>npm 是Node 的模块管理器，功能极其强大。 它是Node 获得成功的重要原因之一。 正因为有了npm，我们只要一行命令，就能安装别人写好的模块。</p>\\n</blockquote>\\n<h3><a id=\"npm_install_5\"></a><strong>npm install</strong></h3>\\n<p><a href=\"https://docs.npmjs.com/cli/install\" target=\"_blank\"><code>npm install</code></a> 命令用来安装模块到<code>node_modules</code>目录。</p>\\n<pre><code class=\"lang-\">$ npm install &lt;packageName&gt; \\n--save-dev -D 本地\\n--save -S 生产\\n-g 全局\\n$ npm uninstall &lt;packageName&gt;\\n</code></pre>\\n<p>安装之前，<code>npm install</code>会先检查，<code>node_modules</code>目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>\\n<p>如果你希望，一个模块不管是否安装过，npm 都要<strong>强制重新安装</strong>（不需要删掉nodemodules），可以使用<code>-f</code>或<code>--force</code>参数</p>\\n<pre><div class=\"hljs\"><code class=\"lang-bash\">$ npm install &lt;packageName&gt; --force // 强制更新\\n</code></div></pre>\\n<h3><a id=\"npm_update_25\"></a><strong>npm update</strong></h3>\\n<p>如果想更新已安装模块，就要用到<a href=\"https://docs.npmjs.com/cli/update\" target=\"_blank\"><code>npm update</code></a>命令。</p>\\n<blockquote>\\n<pre><div class=\"hljs\"><code class=\"lang-bash\">$ npm update &lt;packageName&gt;\\n</code></div></pre>\\n</blockquote>\\n<p>它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。</p>\\n<h3><a id=\"_35\"></a><strong>模块的安装过程</strong></h3>\\n<ol>\\n<li>发出<code>npm install</code>命令</li>\\n<li>npm 向 registry 查询模块压缩包的网址</li>\\n<li>下载压缩包，存放在<code>~/.npm</code>目录</li>\\n<li>解压压缩包到当前项目的<code>node_modules</code>目录</li>\\n</ol>\\n<h1><a id=\"npm_44\"></a>npm常用指令</h1>\\n<pre><div class=\"hljs\"><code class=\"lang-js\">npm init --yes(初始化配置)  -y\\n\\nnpm i (会根据package.json里面的键dependencies，devDependencies来安装相对应的包)\\n\\nnpm i 包(默认安装一个最新的包，这个包在node_modules文件夹里面，并且会更新在你的package.json文件)\\n\\nnpm i 包@<span class=\"hljs-number\">3.0</span><span class=\"hljs-number\">.0</span>（安装一个指定版本的包，会更新在你的package.json文件）\\n\\nnpm i 包 --save-dev(安装一个开发环境所需要的包，会更新在你的package.json文件) -D\\nnpm i 包 --save(安装一个生产环境所需要的包，会更新在你的package.json文件) -S\\n\\nnpm uninstall 包（卸载一个包，会更新在你的package.json文件）\\n\\nnpm update 包(更新此包版本为最新版本，会更新在你的package.json文件)\\n\\nnpm run 脚本键(会根据package.json里面的<span class=\"hljs-string\">\"scripts\"</span>里面的脚本键自动执行相对于的值)\\n\\nnpm publish  (根据package.json的name发布一个包) 发布到npm仓库\\n\\nnpm unpublish 包名 --force(卸载npm网站上自己上传的包)\\n</code></div></pre>\\n<h1><a id=\"packageJson_69\"></a>packageJson文件配置</h1>\\n<pre><div class=\"hljs\"><code class=\"lang-json\">{\\n\\t<span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"axios\"</span>, //发布的包名，默认是上级文件夹名。不得与现在npm中的包名重复。包名不能有大写字母/空格/下滑线!\\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"2.2.2\"</span>,//你这个包的版本，默认是1.0.0。对于npm包的版本号有着一系列的规则，模块的版本号采用X.Y.Z的格式，具体体现为：\\n  1、修复bug，小改动，增加z。\\n  2、增加新特性，可向后兼容，增加y\\n  3、有很大的改动，无法向下兼容,增加x\\n  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"用来请求接口，懂了吗二货\"</span>, // 介绍\\n  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,// 入口文件，默认是Index.js，可以修改成自己的文件,这个很重要，当你在实际项目使用的时候，let a = require(<span class=\"hljs-attr\">\"包名\"</span>)，它就去会去找对应的文件路径哦。\\n  <span class=\"hljs-attr\">\"scripts\"</span>: {                  // 快捷命令，在package.json同目录下输入命令 npm run 键 就会执行 相对应的命令\\n    <span class=\"hljs-attr\">\"bulid\"</span>: <span class=\"hljs-string\">\"npx webpack --config myConfig.js\"</span>,\\n  \\t<span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"xxx\"</span>,\\n  \\t//例如 输入 npm run bulid 就会执行npx webpack --config myConfig.js的命令 。\\n  \\t// npm start 省略run\\n  },\\n  <span class=\"hljs-attr\">\"keywords\"</span>: [],\\n  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"王二蛋\"</span>,\\n  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"ISC\"</span>,// 这个直接回车，开源文件协议吧，也可以是MIT，看需要吧。\\n  <span class=\"hljs-attr\">\"dependencies\"</span>: {             // 生产环境所依赖的包\\n    <span class=\"hljs-attr\">\"jquery\"</span>: <span class=\"hljs-string\">\"^3.4.1\"</span>,\\n    <span class=\"hljs-attr\">\"sea\"</span>: <span class=\"hljs-string\">\"^1.0.2\"</span>\\n  },\\n  <span class=\"hljs-attr\">\"devDependencies\"</span>: {          // 开发环境所依赖的包\\n    <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^4.41.6\"</span>\\n  }\\n}\\n</code></div></pre>\\n<h1><a id=\"npm_101\"></a>更改npm默认的下载路径和缓存路径</h1>\\n<p>npm config ls 命令可查看npm的安装信息以及默认的下载路径。</p>\\n<pre><div class=\"hljs\"><code class=\"lang-bash\">D:\\\\software\\\\cmder\\\\cmder&gt;npm config ls\\n; cli configs\\nmetrics-registry = <span class=\"hljs-string\">\"https://registry.npmjs.org/\"</span>\\nscope = <span class=\"hljs-string\">\"\"</span>\\nuser-agent = <span class=\"hljs-string\">\"npm/6.13.4 node/v12.14.0 win32 x64\"</span>\\n\\n; <span class=\"hljs-built_in\">builtin</span> config undefined\\nprefix = <span class=\"hljs-string\">\"C:\\\\\\\\Users\\\\\\\\DELL\\\\\\\\AppData\\\\\\\\Roaming\\\\\\\\npm\"</span>\\n\\n; node bin location = D:\\\\SoftWareInstall\\\\nodejsIns\\\\node.exe\\n; cwd = D:\\\\software\\\\cmder\\\\cmder\\n; HOME = C:\\\\Users\\\\DELL\\n; <span class=\"hljs-string\">\"npm config ls -l\"</span> to show all defaults.\\n</code></div></pre>\\n<p>注意，npm默认的下载路径在C:\\\\Users\\\\DELL\\\\AppData\\\\Roaming\\\\npm，其中AppData是隐藏文件夹，在【查看】菜单中勾选【隐藏的项目】才可以看到AppData文件夹。</p>\\n<p>???</p>\\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">// 更改npm默认的缓存路径</span>\\nnpm config set cache <span class=\"hljs-string\">\"D:\\\\TempDate\\\\nodedata\\\\cache\"</span>\\n\\n<span class=\"hljs-comment\">// 更改npm默认的下载路径</span>\\nnpm config set prefix <span class=\"hljs-string\">\"D:\\\\TempDate\\\\nodedata\\\\download\"</span>\\n</code></div></pre>\\n<p>更改缓存路径和下载路径后，再次查看</p>\\n<pre><div class=\"hljs\"><code class=\"lang-java\">D:\\\\software\\\\cmder\\\\cmder&gt;npm config ls\\n\\n; userconfig C:\\\\Users\\\\DELL\\\\.npmrc\\ncache = <span class=\"hljs-string\">\"D:\\\\\\\\TempDate\\\\\\\\nodedata\\\\\\\\cache\"</span>\\nprefix = <span class=\"hljs-string\">\"D:\\\\\\\\TempDate\\\\\\\\nodedata\\\\\\\\download\"</span>\\n</code></div></pre>\\n<p>那么下面来介绍一下,如何创建自己的第一个node模块,并把这个模块上传到npm上面,让别人可以用我们的模块</p>\\n<h1><a id=\"node_150\"></a>创建第一个node模块</h1>\\n<p>Node.js模块就是发布到npm的代码包，</p>\\n<blockquote>\\n<p>创建一个新模块的第一步就是创建一个package.json文件。<br />\\n你可以用npm init来创建package.json文件。<br />\\n这个过程中命令行会逐步提示你输入这个模块的信息，<br />\\n其中模块的名字和版本号是必填项</p>\\n</blockquote>\\n<blockquote>\\n<p>你还需要一个入口文件，<br />\\n如果你使用默认值的话，那就会是index.js.<br />\\n创建完package.json文件之后，你就要开始写代码包里的内容了，<br />\\n这里举个最简单的例子，在默认的index.js里写一个要导出的函数，<br />\\n这个函数也就是别人的代码里可以import或者require的。</p>\\n</blockquote>\\n<pre><div class=\"hljs\"><code class=\"lang-jsx\">exports.showMsg = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"This is my first module\"</span>);\\n};\\n</code></div></pre>\\n<p>这样的话,你的node模块就已经创建完成了</p>\\n<h3><a id=\"npm_174\"></a>如何发布到npm服务器上</h3>\\n<h5><a id=\"npm_176\"></a>注册一个npm账号</h5>\\n<h5><a id=\"npm_login__178\"></a>首次需要登录,<strong>npm login</strong> 存储证书到本地,后面就不需要每次都登录的</h5>\\n<p>登录需要输入用户名,密码,还有邮箱,这些都是刚刚注册时候填写的<br />\\nUserName： (<em><strong><strong><strong>)<br />\\nPassword： (</strong></strong></strong></em>)<br />\\nEmial： (*******)</p>\\n<h5><a id=\"_185\"></a>开始发布</h5>\\n<p><strong>npm publish</strong> 发布包</p>\\n<blockquote>\\n<p>使用 cnpm 的注意报错：<br />\\nno_perms Private mode enable, only admin can publish this module<br />\\n设置回原本的就可以了<br />\\n**npm config set registry <a href=\"https://link.jianshu.com?t=http://registry.npmjs.org\" target=\"_blank\">http://registry.npmjs.org</a> **<br />\\n发布完成之后,如果还想回到之前的cnpm,使用下面的命令<br />\\n<strong>npm config set registry <a href=\"https://link.jianshu.com?t=https://registry.npm.taobao.org\" target=\"_blank\">https://registry.npm.taobao.org</a></strong></p>\\n</blockquote>\\n<h3><a id=\"_196\"></a>创建一个案例,引用刚上传的包</h3>\\n<p>​</p>\\n<blockquote>\\n<p>假设已经成功发布了，并且包名叫做<strong>toniqian-test-module</strong>，<br />\\n这时候可以新建一个空目录，cd进去，运行npm install toniqian-test-module，然后在这个目录下会出现一个叫node_modules的文件夹，你之前写的包就会出现在这个文件夹下面。</p>\\n</blockquote>\\n<p>然后写一个index.js,代码如下</p>\\n<pre><div class=\"hljs\"><code class=\"lang-jsx\"><span class=\"hljs-keyword\">var</span> test = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\\'toniqian-test-module\\'</span>);\\ntest.showMsg();\\n</code></div></pre>\\n<p>运行index.js</p>\\n<pre><div class=\"hljs\"><code class=\"lang-css\"><span class=\"hljs-selector-tag\">node</span> <span class=\"hljs-selector-tag\">index</span><span class=\"hljs-selector-class\">.js</span>\\n</code></div></pre>\\n<p>那么刚刚上传的包,目前已经可以使用,到目前的话,<br />\\n你已经成功创建了一个npm包了</p>\\n<h3><a id=\"npm_223\"></a>如何更新npm包</h3>\\n<p>当你包的内容修改之后,比如</p>\\n<pre><div class=\"hljs\"><code class=\"lang-jsx\">exports.showMsg = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"This is my second module\"</span>);\\n};\\n</code></div></pre>\\n<blockquote>\\n<p>修改了提示文字,那么我们需要 <strong>npm version &lt;update_type&gt;</strong><br />\\n<strong>update_type</strong>就是版本号的意思,会自动更新<strong>package.json</strong>里面的版本号<br />\\n然后重新 <strong>npm publish</strong>,更新就会完成</p>\\n</blockquote>\\n<p><strong>作业</strong> 实现一个相对时间转换函数</p>\\n<pre><div class=\"hljs\"><code class=\"lang-jsx\">moment(time){\\n  <span class=\"hljs-comment\">// 相对时间转换</span>\\n}\\n</code></div></pre>\\n<h3><a id=\"npm_247\"></a>如何删除npm包</h3>\\n<pre><code class=\"lang-\">npm unpublish kk-a-test --force\\n</code></pre>\\n<h3><a id=\"npm_253\"></a>查看当前登录的npm账号</h3>\\n<pre><code class=\"lang-\">npm whoami\\n</code></pre>\\n<p>输出 username</p>\\n<h1><a id=\"_261\"></a><strong>发布包错误集锦</strong></h1>\\n<p>1、需要提高版本号</p>\\n<pre><div class=\"hljs\"><code class=\"lang-ruby\"><span class=\"hljs-comment\">#1、发包 npm publish 失败</span>\\nsh-<span class=\"hljs-symbol\">neverleave:</span>z-tool neverleave$ npm publish\\nnpm ERR! publish Failed PUT <span class=\"hljs-number\">400</span>\\nnpm ERR! code E40<span class=\"hljs-number\">0</span>\\nnpm ERR! deprecations must be strings : z-tool\\n\\nnpm ERR! A complete log of this run can be found <span class=\"hljs-symbol\">in:</span>\\nnpm ERR!     <span class=\"hljs-regexp\">/Users/neverleave</span><span class=\"hljs-regexp\">/.npm/</span>_logs/<span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">23</span>T10_52_01_742Z-debug.log\\nsh-<span class=\"hljs-symbol\">neverleave:</span>z-tool neverleave$ npm publish\\n\\n\\n<span class=\"hljs-comment\">#2、发包 npm publish 失败</span>\\nsh-<span class=\"hljs-symbol\">neverleave:</span>z-tool neverleave$ npm publish\\nnpm ERR! publish Failed PUT <span class=\"hljs-number\">403</span>\\nnpm ERR! code E403\\nnpm ERR! You cannot publish over the previously published <span class=\"hljs-symbol\">versions:</span> <span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">3</span>. : z-tool\\n\\nnpm ERR! A complete log of this run can be found <span class=\"hljs-symbol\">in:</span>\\nnpm ERR!     <span class=\"hljs-regexp\">/Users/neverleave</span><span class=\"hljs-regexp\">/.npm/</span>_logs/<span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">23</span>T11_24_57_662Z-debug.log\\nsh-<span class=\"hljs-symbol\">neverleave:</span>z-tool neverleave$ \\n</code></div></pre>\\n<p>2、发包 npm publish 失败<br />\\n解决方案：终端执行： npm publish --access public</p>\\n<p>参考：https://stackoverflow.com/questions/53420758/npm-publish-gives-unscoped-packages-cannot-be-private</p>\\n<pre><div class=\"hljs\"><code class=\"lang-ruby\"><span class=\"hljs-comment\">#1、发包 npm publish 失败</span>\\nsh-<span class=\"hljs-symbol\">neverleave:</span>npm neverleave$ npm publish\\nnpm ERR! publish Failed PUT <span class=\"hljs-number\">400</span>\\nnpm ERR! code E40<span class=\"hljs-number\">0</span>\\nnpm ERR! unscoped packages cannot be private : z-tool\\n\\nnpm ERR! A complete log of this run can be found <span class=\"hljs-symbol\">in:</span>\\nnpm ERR!     <span class=\"hljs-regexp\">/Users/neverleave</span><span class=\"hljs-regexp\">/.npm/</span>_logs/<span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">23</span>T08_44_21_310Z-debug.log\\nsh-<span class=\"hljs-symbol\">neverleave:</span>npm neverleave$ \\n\\n<span class=\"hljs-comment\">#解决方案：终端执行： npm publish --access public</span>\\nsh-<span class=\"hljs-symbol\">neverleave:</span>npm neverleave$ npm publish --access public\\n+ z-tool@1.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>\\nsh-<span class=\"hljs-symbol\">neverleave:</span>npm neverleave$ \\n</code></div></pre>\\n<p>3、确保登录的用户账号正确</p>\\n<pre><code class=\"lang-swift\">sh-neverleave:npm neverleave$ npm publish\\nnpm ERR! publish Failed PUT 404\\nnpm ERR! code E404\\nnpm ERR! 404 User not found : z-tool\\nnpm ERR! 404 \\nnpm ERR! 404  \\'z-tool\\' is not in the npm registry.\\nnpm ERR! 404 You should bug the author to publish it (or use the name yourself!)\\nnpm ERR! 404 \\nnpm ERR! 404 Note that you can also install from a\\nnpm ERR! 404 tarball, folder, http url, or git url.\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T07_32_28_518Z-debug.log\\n</code></pre>\\n<p>4、登录时需要在username 前加‘~’，具体大家可以验证</p>\\n<pre><code class=\"lang-kotlin\">sh-neverleave:npm neverleave$ npm login\\nUsername: (~neverleave) neverleave\\nPassword: (&lt;default hidden&gt;) \\nEmail: (this IS public) (1063588359@qq.com) \\nnpm ERR! code EAUTHIP\\nnpm ERR! Unable to authenticate, need: Basic\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T07_27_50_877Z-debug.log\\nsh-neverleave:npm neverleave$ \\n</code></pre>\\n<p>5、无权限删除线上的包（撤包有时间限制，24小时）<br />\\n解决方案：加上 --force</p>\\n<pre><div class=\"hljs\"><code class=\"lang-bash\">sh-neverleave:z-tool neverleave$ npm unpublish z-tool\\nnpm ERR! Refusing to delete entire project.\\nnpm ERR! Run with --force to <span class=\"hljs-keyword\">do</span> this.\\nnpm ERR! npm unpublish [&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]\\nsh-neverleave:z-tool neverleave$ \\n\\n<span class=\"hljs-comment\">#解决方案（内部有被鄙视的话，😄 I sure hope you know what you are doing.）</span>\\nsh-neverleave:z-tool neverleave$ npm unpublish z-tool --force\\nnpm WARN using --force I sure hope you know what you are doing.\\n- z-tool\\nsh-neverleave:z-tool neverleave$ \\n</code></div></pre>\\n<p>6、删除npm市场的包同名的24小时后才能重新发布</p>\\n<pre><div class=\"hljs\"><code class=\"lang-ruby\">sh-<span class=\"hljs-symbol\">neverleave:</span>z-tool neverleave$ npm publish\\nnpm ERR! publish Failed PUT <span class=\"hljs-number\">403</span>\\nnpm ERR! code E403\\nnpm ERR! z-tool cannot be republished <span class=\"hljs-keyword\">until</span> <span class=\"hljs-number\">24</span> hours have passed. : z-tool\\n\\nnpm ERR! A complete log of this run can be found <span class=\"hljs-symbol\">in:</span>\\nnpm ERR!     <span class=\"hljs-regexp\">/Users/neverleave</span><span class=\"hljs-regexp\">/.npm/</span>_logs/<span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">11</span>-<span class=\"hljs-number\">23</span>T11_41_24_086Z-debug.log\\nsh-<span class=\"hljs-symbol\">neverleave:</span>z-tool neverleave$ \\n</code></div></pre>\\n',\r\n\t\t\tis_english: '',\r\n\t\t\tis_gfw: '',\r\n\t\t\tis_original: '1',\r\n\t\t\tlink_url: '',\r\n\t\t\tmark_content:\r\n\t\t\t\t'\\n# npm是什么\\n\\n> npm 是Node 的模块管理器，功能极其强大。 它是Node 获得成功的重要原因之一。 正因为有了npm，我们只要一行命令，就能安装别人写好的模块。\\n\\n### **npm install**\\n\\n[`npm install`](https://docs.npmjs.com/cli/install) 命令用来安装模块到`node_modules`目录。\\n\\n```\\n$ npm install <packageName> \\n--save-dev -D 本地\\n--save -S 生产\\n-g 全局\\n$ npm uninstall <packageName>\\n```\\n\\n安装之前，`npm install`会先检查，`node_modules`目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。\\n\\n如果你希望，一个模块不管是否安装过，npm 都要**强制重新安装**（不需要删掉nodemodules），可以使用`-f`或`--force`参数\\n\\n```bash\\n$ npm install <packageName> --force // 强制更新\\n```\\n\\n### **npm update**\\n\\n如果想更新已安装模块，就要用到[`npm update`](https://docs.npmjs.com/cli/update)命令。\\n\\n> ```bash\\n> $ npm update <packageName>\\n> ```\\n\\n它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。\\n\\n### **模块的安装过程**\\n\\n1. 发出`npm install`命令\\n2. npm 向 registry 查询模块压缩包的网址\\n3. 下载压缩包，存放在`~/.npm`目录\\n4. 解压压缩包到当前项目的`node_modules`目录\\n\\n\\n\\n# npm常用指令\\n\\n```js\\nnpm init --yes(初始化配置)  -y\\n\\nnpm i (会根据package.json里面的键dependencies，devDependencies来安装相对应的包)\\n\\nnpm i 包(默认安装一个最新的包，这个包在node_modules文件夹里面，并且会更新在你的package.json文件)\\n\\nnpm i 包@3.0.0（安装一个指定版本的包，会更新在你的package.json文件）\\n\\nnpm i 包 --save-dev(安装一个开发环境所需要的包，会更新在你的package.json文件) -D\\nnpm i 包 --save(安装一个生产环境所需要的包，会更新在你的package.json文件) -S\\n\\nnpm uninstall 包（卸载一个包，会更新在你的package.json文件）\\n\\nnpm update 包(更新此包版本为最新版本，会更新在你的package.json文件)\\n\\nnpm run 脚本键(会根据package.json里面的\"scripts\"里面的脚本键自动执行相对于的值)\\n\\nnpm publish  (根据package.json的name发布一个包) 发布到npm仓库\\n\\nnpm unpublish 包名 --force(卸载npm网站上自己上传的包)\\n```\\n\\n# packageJson文件配置\\n\\n```json\\n{\\n \"name\": \"axios\", \\n  \"version\": \"2.2.2\",\\n  \"description\": \"\", \\n  \"main\": \"index.js\",。\\n  \"scripts\": {  \\n    \"bulid\": \"npx webpack --config myConfig.js\",\\n    \"start\": \"xxx\",\\n  },\\n  \"keywords\": [],\\n  \"author\": \"\",\\n  \"license\": \"ISC\",\\n  \"dependencies\": {\\n    \"jquery\": \"^3.4.1\",\\n    \"sea\": \"^1.0.2\"\\n  },\\n  \"devDependencies\": {\\n    \"webpack\": \"^4.41.6\"\\n  }\\n}\\n```\\n\\n\\n\\n# 更改npm默认的下载路径和缓存路径\\n\\nnpm config ls 命令可查看npm的安装信息以及默认的下载路径。\\n\\n\\n\\n```bash\\nD:\\\\software\\\\cmder\\\\cmder>npm config ls\\n; cli configs\\nmetrics-registry = \"https://registry.npmjs.org/\"\\nscope = \"\"\\nuser-agent = \"npm/6.13.4 node/v12.14.0 win32 x64\"\\n\\n; builtin config undefined\\nprefix = \"C:\\\\\\\\Users\\\\\\\\DELL\\\\\\\\AppData\\\\\\\\Roaming\\\\\\\\npm\"\\n\\n; node bin location = D:\\\\SoftWareInstall\\\\nodejsIns\\\\node.exe\\n; cwd = D:\\\\software\\\\cmder\\\\cmder\\n; HOME = C:\\\\Users\\\\DELL\\n; \"npm config ls -l\" to show all defaults.\\n```\\n\\n注意，npm默认的下载路径在C:\\\\Users\\\\DELL\\\\AppData\\\\Roaming\\\\npm，其中AppData是隐藏文件夹，在【查看】菜单中勾选【隐藏的项目】才可以看到AppData文件夹。\\n\\n???\\n\\n```java\\n// 更改npm默认的缓存路径\\nnpm config set cache \"D:\\\\TempDate\\\\nodedata\\\\cache\"\\n\\n// 更改npm默认的下载路径\\nnpm config set prefix \"D:\\\\TempDate\\\\nodedata\\\\download\"\\n```\\n\\n更改缓存路径和下载路径后，再次查看\\n\\n\\n\\n```java\\nD:\\\\software\\\\cmder\\\\cmder>npm config ls\\n\\n; userconfig C:\\\\Users\\\\DELL\\\\.npmrc\\ncache = \"D:\\\\\\\\TempDate\\\\\\\\nodedata\\\\\\\\cache\"\\nprefix = \"D:\\\\\\\\TempDate\\\\\\\\nodedata\\\\\\\\download\"\\n```\\n\\n\\n\\n那么下面来介绍一下,如何创建自己的第一个node模块,并把这个模块上传到npm上面,让别人可以用我们的模块\\n# 创建第一个node模块\\n\\nNode.js模块就是发布到npm的代码包，\\n\\n> 创建一个新模块的第一步就是创建一个package.json文件。\\n> 你可以用npm init来创建package.json文件。\\n> 这个过程中命令行会逐步提示你输入这个模块的信息，\\n> 其中模块的名字和版本号是必填项\\n\\n\\n> 你还需要一个入口文件，\\n> 如果你使用默认值的话，那就会是index.js.\\n> 创建完package.json文件之后，你就要开始写代码包里的内容了，\\n> 这里举个最简单的例子，在默认的index.js里写一个要导出的函数，\\n> 这个函数也就是别人的代码里可以import或者require的。\\n\\n```jsx\\nexports.showMsg = function () {\\n  console.log(\"This is my first module\");\\n};\\n```\\n\\n这样的话,你的node模块就已经创建完成了\\n\\n### 如何发布到npm服务器上\\n\\n##### 注册一个npm账号\\n\\n##### 首次需要登录,**npm login** 存储证书到本地,后面就不需要每次都登录的\\n\\n登录需要输入用户名,密码,还有邮箱,这些都是刚刚注册时候填写的\\nUserName： (*******)\\nPassword： (*******)\\nEmial： (*******)\\n\\n##### 开始发布\\n\\n**npm publish** 发布包\\n\\n> 使用 cnpm 的注意报错：\\n> no_perms Private mode enable, only admin can publish this module\\n> 设置回原本的就可以了\\n> **npm config set registry [http://registry.npmjs.org](https://link.jianshu.com?t=http://registry.npmjs.org) **\\n> 发布完成之后,如果还想回到之前的cnpm,使用下面的命令\\n> **npm config set registry [https://registry.npm.taobao.org](https://link.jianshu.com?t=https://registry.npm.taobao.org)**\\n\\n### 创建一个案例,引用刚上传的包\\n\\n​\\t\\n\\n> 假设已经成功发布了，并且包名叫做**toniqian-test-module**，\\n> 这时候可以新建一个空目录，cd进去，运行npm install toniqian-test-module，然后在这个目录下会出现一个叫node_modules的文件夹，你之前写的包就会出现在这个文件夹下面。\\n\\n然后写一个index.js,代码如下\\n\\n\\n\\n```jsx\\nvar test = require(\\'toniqian-test-module\\');\\ntest.showMsg();\\n```\\n\\n运行index.js\\n\\n\\n\\n```css\\nnode index.js\\n```\\n\\n那么刚刚上传的包,目前已经可以使用,到目前的话,\\n你已经成功创建了一个npm包了\\n\\n### 如何更新npm包\\n\\n当你包的内容修改之后,比如\\n\\n\\n\\n```jsx\\nexports.showMsg = function () {\\n  console.log(\"This is my second module\");\\n};\\n```\\n\\n> 修改了提示文字,那么我们需要 **npm version <update_type>**\\n> **update_type**就是版本号的意思,会自动更新**package.json**里面的版本号\\n> 然后重新 **npm publish**,更新就会完成\\n\\n**作业** 实现一个相对时间转换函数\\n\\n```jsx\\nmoment(time){\\n  // 相对时间转换\\n}\\n```\\n\\n### 如何删除npm包\\n\\n```\\nnpm unpublish kk-a-test --force\\n```\\n\\n### 查看当前登录的npm账号\\n\\n```\\nnpm whoami\\n```\\n\\n输出 username\\n\\n# **发布包错误集锦**\\n\\n1、需要提高版本号\\n\\n\\n\\n```ruby\\n#1、发包 npm publish 失败\\nsh-neverleave:z-tool neverleave$ npm publish\\nnpm ERR! publish Failed PUT 400\\nnpm ERR! code E400\\nnpm ERR! deprecations must be strings : z-tool\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T10_52_01_742Z-debug.log\\nsh-neverleave:z-tool neverleave$ npm publish\\n\\n\\n#2、发包 npm publish 失败\\nsh-neverleave:z-tool neverleave$ npm publish\\nnpm ERR! publish Failed PUT 403\\nnpm ERR! code E403\\nnpm ERR! You cannot publish over the previously published versions: 1.0.3. : z-tool\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T11_24_57_662Z-debug.log\\nsh-neverleave:z-tool neverleave$ \\n```\\n\\n2、发包 npm publish 失败\\n 解决方案：终端执行： npm publish --access public\\n\\n参考：https://stackoverflow.com/questions/53420758/npm-publish-gives-unscoped-packages-cannot-be-private\\n\\n\\n\\n```ruby\\n#1、发包 npm publish 失败\\nsh-neverleave:npm neverleave$ npm publish\\nnpm ERR! publish Failed PUT 400\\nnpm ERR! code E400\\nnpm ERR! unscoped packages cannot be private : z-tool\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T08_44_21_310Z-debug.log\\nsh-neverleave:npm neverleave$ \\n\\n#解决方案：终端执行： npm publish --access public\\nsh-neverleave:npm neverleave$ npm publish --access public\\n+ z-tool@1.0.0\\nsh-neverleave:npm neverleave$ \\n```\\n\\n3、确保登录的用户账号正确\\n\\n\\n\\n```swift\\nsh-neverleave:npm neverleave$ npm publish\\nnpm ERR! publish Failed PUT 404\\nnpm ERR! code E404\\nnpm ERR! 404 User not found : z-tool\\nnpm ERR! 404 \\nnpm ERR! 404  \\'z-tool\\' is not in the npm registry.\\nnpm ERR! 404 You should bug the author to publish it (or use the name yourself!)\\nnpm ERR! 404 \\nnpm ERR! 404 Note that you can also install from a\\nnpm ERR! 404 tarball, folder, http url, or git url.\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T07_32_28_518Z-debug.log\\n```\\n\\n4、登录时需要在username 前加‘~’，具体大家可以验证\\n\\n\\n\\n```kotlin\\nsh-neverleave:npm neverleave$ npm login\\nUsername: (~neverleave) neverleave\\nPassword: (<default hidden>) \\nEmail: (this IS public) (1063588359@qq.com) \\nnpm ERR! code EAUTHIP\\nnpm ERR! Unable to authenticate, need: Basic\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T07_27_50_877Z-debug.log\\nsh-neverleave:npm neverleave$ \\n```\\n\\n5、无权限删除线上的包（撤包有时间限制，24小时）\\n 解决方案：加上 --force\\n\\n\\n\\n```bash\\nsh-neverleave:z-tool neverleave$ npm unpublish z-tool\\nnpm ERR! Refusing to delete entire project.\\nnpm ERR! Run with --force to do this.\\nnpm ERR! npm unpublish [<@scope>/]<pkg>[@<version>]\\nsh-neverleave:z-tool neverleave$ \\n\\n#解决方案（内部有被鄙视的话，😄 I sure hope you know what you are doing.）\\nsh-neverleave:z-tool neverleave$ npm unpublish z-tool --force\\nnpm WARN using --force I sure hope you know what you are doing.\\n- z-tool\\nsh-neverleave:z-tool neverleave$ \\n```\\n\\n6、删除npm市场的包同名的24小时后才能重新发布\\n\\n\\n\\n```ruby\\nsh-neverleave:z-tool neverleave$ npm publish\\nnpm ERR! publish Failed PUT 403\\nnpm ERR! code E403\\nnpm ERR! z-tool cannot be republished until 24 hours have passed. : z-tool\\n\\nnpm ERR! A complete log of this run can be found in:\\nnpm ERR!     /Users/neverleave/.npm/_logs/2018-11-23T11_41_24_086Z-debug.log\\nsh-neverleave:z-tool neverleave$ \\n```\\n\\n',\r\n\t\t\ttag_ids: '[\"6809637769959178254\",\"6809637767543259144\",\"6809635626879549454\"]',\r\n\t\t\ttitle: '如何发布npm包',\r\n\t\t\tarticle_id: '3a852300950ab2f1ce5b6e06b584164a',\r\n\t\t\tcreate_time: '1611151555442',\r\n\t\t\tupdate_time: '1539187200000',\r\n\t\t\treference: null,\r\n\t\t},\r\n\t],\r\n\tmessage: '获取成功',\r\n\tsysTime: 1615080988000,\r\n};\r\n","/**\r\n * Created By brand On 2018/2/2\r\n */\r\nimport React, { Component } from 'react';\r\nimport './index.css';\r\n\r\nclass Paginationcomponent extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcurrentPage: 1, //当前页码\r\n\t\t\tgroupCount: 5, //页码分组，显示7个页码，其余用省略号显示\r\n\t\t\tstartPage: 1, //分组开始页码\r\n\t\t\ttotalPage: 1, //总页数\r\n\t\t};\r\n\t\tthis.createPage = this.createPage.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t// this.createPage();\r\n\t\tthis.setState({\r\n\t\t\ttotalPage: this.props.pageConfig.totalPage,\r\n\t\t});\r\n\t\t// this.props.changePage(this.state.currentPage);\r\n\t}\r\n\r\n\tcreatePage() {\r\n\t\t//const {totalPage} = this.props.pageConfig;\r\n\t\tconst { currentPage, groupCount, startPage, totalPage } = this.state;\r\n\t\tlet pages = [];\r\n\t\t//上一页\r\n\t\tpages.push(\r\n\t\t\t<li className={currentPage === 1 ? 'nomore' : null} onClick={this.prePageHandeler.bind(this)} key={0}>\r\n\t\t\t\t上一页\r\n\t\t\t</li>\r\n\t\t);\r\n\r\n\t\tif (totalPage <= 10) {\r\n\t\t\t/*总页码小于等于10时，全部显示出来*/\r\n\t\t\tfor (let i = 1; i <= totalPage; i++) {\r\n\t\t\t\tpages.push(\r\n\t\t\t\t\t<li key={i} onClick={this.pageClick.bind(this, i)} className={currentPage === i ? 'activePage' : null}>\r\n\t\t\t\t\t\t{i}\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t/*总页码大于10时，部分显示*/\r\n\r\n\t\t\t//第一页\r\n\t\t\tpages.push(\r\n\t\t\t\t<li className={currentPage === 1 ? 'activePage' : null} key={1} onClick={this.pageClick.bind(this, 1)}>\r\n\t\t\t\t\t1\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\r\n\t\t\tlet pageLength = 0;\r\n\t\t\tif (groupCount + startPage > totalPage) {\r\n\t\t\t\tpageLength = totalPage;\r\n\t\t\t} else {\r\n\t\t\t\tpageLength = groupCount + startPage;\r\n\t\t\t}\r\n\t\t\t//前面省略号(当当前页码比分组的页码大时显示省略号)\r\n\t\t\tif (currentPage >= groupCount) {\r\n\t\t\t\tpages.push(\r\n\t\t\t\t\t<li className=\"\" key={-1}>\r\n\t\t\t\t\t\t···\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t//非第一页和最后一页显示\r\n\t\t\tfor (let i = startPage; i < pageLength; i++) {\r\n\t\t\t\tif (i <= totalPage - 1 && i > 1) {\r\n\t\t\t\t\tpages.push(\r\n\t\t\t\t\t\t<li className={currentPage === i ? 'activePage' : null} key={i} onClick={this.pageClick.bind(this, i)}>\r\n\t\t\t\t\t\t\t{i}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//后面省略号\r\n\t\t\tif (totalPage - startPage >= groupCount + 1) {\r\n\t\t\t\tpages.push(\r\n\t\t\t\t\t<li className=\"\" key={-2}>\r\n\t\t\t\t\t\t···\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t//最后一页\r\n\t\t\tpages.push(\r\n\t\t\t\t<li className={currentPage === totalPage ? 'activePage' : null} key={totalPage} onClick={this.pageClick.bind(this, totalPage)}>\r\n\t\t\t\t\t{totalPage}\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\t\t}\r\n\t\t//下一页\r\n\t\tpages.push(\r\n\t\t\t<li className={currentPage === totalPage ? 'nomore' : null} onClick={this.nextPageHandeler.bind(this)} key={totalPage + 1}>\r\n\t\t\t\t下一页\r\n\t\t\t</li>\r\n\t\t);\r\n\t\treturn pages;\r\n\t}\r\n\r\n\t//页码点击\r\n\tpageClick(currentPage) {\r\n\t\tconst { groupCount } = this.state;\r\n\t\tconst getCurrentPage = this.props.changePage;\r\n\t\t//当 当前页码 大于 分组的页码 时，使 当前页 前面 显示 两个页码\r\n\t\tif (currentPage >= groupCount) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tstartPage: currentPage - 2,\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (currentPage < groupCount) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tstartPage: 1,\r\n\t\t\t});\r\n\t\t}\r\n\t\t//第一页时重新设置分组的起始页\r\n\t\tif (currentPage === 1) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tstartPage: 1,\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tcurrentPage,\r\n\t\t});\r\n\t\t//将当前页码返回父组件\r\n\t\tgetCurrentPage(currentPage);\r\n\t}\r\n\r\n\t//上一页事件\r\n\tprePageHandeler() {\r\n\t\tlet { currentPage } = this.state;\r\n\t\tif (--currentPage === 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.pageClick(currentPage);\r\n\t}\r\n\r\n\t//下一页事件\r\n\tnextPageHandeler() {\r\n\t\tlet { currentPage, totalPage } = this.state;\r\n\t\t// const {totalPage} = this.props.pageConfig;\r\n\t\tif (++currentPage > totalPage) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.pageClick(currentPage);\r\n\t}\r\n\trender() {\r\n\t\tconst pageList = this.createPage();\r\n\t\treturn <ul className=\"page-container\">{pageList}</ul>;\r\n\t}\r\n}\r\n\r\nexport default Paginationcomponent;\r\n","import React, { Component } from 'react';\r\nimport HeaderComponent from '../../components/pageHeader';\r\nimport { response } from '../../response';\r\nimport './home.css';\r\nimport moment from 'moment';\r\nimport Paginationcomponent from '../../components/pagination';\r\n\r\nexport default class HomePage extends Component {\r\n\tstate = {\r\n\t\toringinList: response.data,\r\n\t\tlist: [],\r\n\t\tpageConfig: {\r\n\t\t\tpageSize: 4,\r\n\t\t\tcurrentPage: 0,\r\n\t\t\ttotalPage: Math.ceil(response.data.length / 4),\r\n\t\t},\r\n\t};\r\n\tchangePage(currentPage) {\r\n\t\tlet { oringinList, pageConfig } = this.state;\r\n\t\tlet temp = oringinList.filter((v) => v.id);\r\n\t\tlet list = temp.slice((currentPage - 1) * pageConfig.pageSize, currentPage * pageConfig.pageSize);\r\n\t\tthis.setState({ list });\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tlet { oringinList, pageConfig } = this.state;\r\n\t\toringinList.map((v) => {\r\n\t\t\tv.update_time = moment(Number(v.create_time)).format('YYYY-DD-MM HH:MM:SS'); // 一月 27日 2021, 11:30:44 晚上\r\n\t\t\treturn v;\r\n\t\t});\r\n\t\tlet temp = oringinList.filter((v) => v.id);\r\n\t\tlet list = temp.slice(pageConfig.currentPage * pageConfig.pageSize, (pageConfig.currentPage + 1) * pageConfig.pageSize);\r\n\t\tthis.setState({ list, oringinList }, () => {\r\n\t\t\tdocument.addEventListener('visibilitychange', () => {\r\n\t\t\t\tif (document.hidden) {\r\n\t\t\t\t\tdocument.title = '你怎么走啦~';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdocument.title = \"李子发的个人网站 - zifa.li's Personal Website\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\tjump(data, type = '') {\r\n\t\tlet { history } = this.props;\r\n\t\tif (type === 'development') {\r\n\t\t\twindow.toast('努力整理中~');\r\n\t\t} else {\r\n\t\t\thistory.push(`/post/${data.article_id}`);\r\n\t\t\tdocument.title = data.title;\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\tlet { list, pageConfig } = this.state;\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<HeaderComponent />\r\n\t\t\t\t<section id=\"main\" className=\"home-page\">\r\n\t\t\t\t\t<div className=\"notice \">The Harder You Work , The Luckier You Will Be .</div>\r\n\t\t\t\t\t<div className=\"container \">\r\n\t\t\t\t\t\t<h1 className=\"label-title\">聚焦</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"container swiper-container\">\r\n\t\t\t\t\t\t<div className=\"swiper\">\r\n\t\t\t\t\t\t\t<div className=\"item\" onClick={this.jump.bind(this, response.data[0], 'development')}>\r\n\t\t\t\t\t\t\t\t<div className=\"mask\">\r\n\t\t\t\t\t\t\t\t\t<span className=\"foverlay\">开发中</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<img src={require('../../assets/feature1.jpg').default} alt=\"11\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"item\" onClick={this.jump.bind(this, response.data[0], 'development')}>\r\n\t\t\t\t\t\t\t\t<div className=\"mask\">\r\n\t\t\t\t\t\t\t\t\t<span className=\"foverlay\">开发中</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<img src={require('../../assets/feature2.jpg').default} alt=\"11\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"item\" onClick={this.jump.bind(this, response.data[0], 'development')}>\r\n\t\t\t\t\t\t\t\t<div className=\"mask\">\r\n\t\t\t\t\t\t\t\t\t<span className=\"foverlay\">开发中</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<img src={require('../../assets/feature3.jpg').default} alt=\"11\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"item wap\" onClick={this.jump.bind(this, response.data[0])}>\r\n\t\t\t\t\t\t\t\t<div className=\"mask\">\r\n\t\t\t\t\t\t\t\t\t<span className=\"foverlay\">开发中</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<img src={require('../../assets/feature1.jpg').default} alt=\"11\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"item wap\" onClick={this.jump.bind(this, response.data[0])}>\r\n\t\t\t\t\t\t\t\t<div className=\"mask\">\r\n\t\t\t\t\t\t\t\t\t<span className=\"foverlay\">开发中</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<img src={require('../../assets/feature2.jpg').default} alt=\"11\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t<h2 className=\"main-title\">近况</h2>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t{list.map((item, index) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<div className=\"post-list\" key={index}>\r\n\t\t\t\t\t\t\t\t\t\t<h1 className=\"entry-title\" onClick={this.jump.bind(this, item)}>\r\n\t\t\t\t\t\t\t\t\t\t\t{item.title}\r\n\t\t\t\t\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t\t\t\t\t<p>{item.rief_content}</p>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"infos\">\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"icon iconfont iconfont lphva-icon-fabu2\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t{item.update_time}\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"icon iconfont lphva-icon-gengduo1\"></i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"pagination-box\">\r\n\t\t\t\t\t\t\t<Paginationcomponent pageConfig={pageConfig} changePage={this.changePage.bind(this)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</section>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport HeaderComponent from '../../components/pageHeader';\r\nimport './detail.css';\r\nimport { response } from '../../response';\r\nconst ReactMarkdown = require('react-markdown');\r\n\r\nexport default class DetailPage extends Component {\r\n\tstate = {\r\n\t\tinfos: {},\r\n\t};\r\n\tcomponentDidMount() {\r\n\t\tlet { match } = this.props;\r\n\t\tlet { id } = match.params;\r\n\t\tlet { infos } = this.state;\r\n\t\tlet data = response.data;\r\n\t\tlet temp = data.find((v) => v.article_id === id) || data[0] || { reference: '[]' };\r\n\t\tinfos = Object.assign(infos, temp);\r\n\t\tinfos.reference = infos.reference ? JSON.parse(infos.reference) : [];\r\n\t\tthis.setState({ infos }, () => {\r\n\t\t\tlet { infos } = this.state;\r\n\t\t\tlet callback = () => {\r\n\t\t\t\tif (document.hidden) {\r\n\t\t\t\t\tdocument.title = '你怎么走啦~';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdocument.title = infos.title;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tdocument.title = infos.title || '404页面';\r\n\t\t\tdocument.addEventListener('visibilitychange', callback);\r\n\t\t\twindow.scrollTo(0, 0);\r\n\t\t});\r\n\t}\r\n\topenNewWuindow = (item) => {\r\n\t\tconsole.log(item);\r\n\t\tlet dom = document.createElement('a');\r\n\t\tdom.setAttribute('href', item.link);\r\n\t\tdom.setAttribute('target', '_blank');\r\n\t\tdocument.body.appendChild(dom);\r\n\t\tdom.click();\r\n\t\tdom.parentNode.removeChild(dom);\r\n\t};\r\n\trenderContent() {\r\n\t\tlet { infos } = this.state;\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div id=\"main\" className=\"detail\">\r\n\t\t\t\t\t<div className=\"container markdown-body\">\r\n\t\t\t\t\t\t<ReactMarkdown source={infos.mark_content} />\r\n\t\t\t\t\t\t{infos.reference && infos.reference.length > 0 ? (\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t<h2>参考资料</h2>\r\n\t\t\t\t\t\t\t\t<ul className=\"reference-module\">\r\n\t\t\t\t\t\t\t\t\t{infos.reference.map((v, i) => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<li key={i}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span onClick={this.openNewWuindow.bind(this, v)}>{v.name}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<HeaderComponent />\r\n\t\t\t\t{this.renderContent()}\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class BackTopComponent extends Component {\r\n\tcomponentDidMount() {\r\n\t\tconst scrollBtn = document.getElementById('backTop');\r\n\t\twindow.addEventListener('scroll', scrollFunc, false);\r\n\t\tscrollBtn.addEventListener('click', moveFunc, false);\r\n\t\tfunction scrollFunc() {\r\n\t\t\tlet scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\r\n\t\t\tif (scrollTop > 100) {\r\n\t\t\t\tscrollBtn.style.display = 'block';\r\n\t\t\t} else {\r\n\t\t\t\tscrollBtn.style.display = 'none';\r\n\t\t\t}\r\n\t\t}\r\n\t\tfunction moveFunc(number = 0, time) {\r\n\t\t\tif (!time) {\r\n\t\t\t\tdocument.body.scrollTop = document.documentElement.scrollTop = number;\r\n\t\t\t\treturn number;\r\n\t\t\t}\r\n\t\t\tconst spacingTime = 20; // 设置循环的间隔时间  值越小消耗性能越高\r\n\t\t\tlet spacingInex = time / spacingTime; // 计算循环的次数\r\n\t\t\tlet nowTop = document.body.scrollTop + document.documentElement.scrollTop; // 获取当前滚动条位置\r\n\t\t\tlet everTop = (number - nowTop) / spacingInex; // 计算每次滑动的距离\r\n\t\t\tlet scrollTimer = setInterval(() => {\r\n\t\t\t\tif (spacingInex > 0) {\r\n\t\t\t\t\tspacingInex--;\r\n\t\t\t\t\tmoveFunc((nowTop += everTop));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tclearInterval(scrollTimer); // 清除计时器\r\n\t\t\t\t}\r\n\t\t\t}, spacingTime);\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"back-top\" id=\"backTop\">\r\n\t\t\t\t<i className=\"icon iconfont lphva-icon-fanhuidingbu\"></i>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport ClipboardJS from 'clipboard';\r\nexport default class FollowComponent extends Component {\r\n\tstate = {\r\n\t\tinfos: {\r\n\t\t\tnickname: '小书包',\r\n\t\t\twechat: 'lizifa2013',\r\n\t\t},\r\n\t};\r\n\tonClick = () => {\r\n\t\talert('正在努力创作~');\r\n\t};\r\n\tcopy() {\r\n\t\twindow.toast('微信号已复制~');\r\n\t\tlet { infos } = this.state;\r\n\t\tlet clipboard = new ClipboardJS('.btn', {\r\n\t\t\ttext() {\r\n\t\t\t\treturn infos.wechat;\r\n\t\t\t},\r\n\t\t});\r\n\t\tclipboard.on('success', () => {\r\n\t\t\t// alert('微信号已复制~');\r\n\t\t\tclipboard.destroy();\r\n\t\t});\r\n\t\tclipboard.on('error', () => {\r\n\t\t\tclipboard.destroy();\r\n\t\t});\r\n\t}\r\n\trender() {\r\n\t\tlet { infos } = this.state;\r\n\t\treturn (\r\n\t\t\t<div id=\"follow-me\">\r\n\t\t\t\t<div className=\"flex-left\">\r\n\t\t\t\t\t<div className=\"icon-box\">\r\n\t\t\t\t\t\t<span className=\"icon iconfont lphva-icon-weixin\"></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t\t<div className=\"nickname\">{infos.nickname}</div>\r\n\t\t\t\t\t\t<div className=\"wechat\">{infos.wechat}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"flex-right\">\r\n\t\t\t\t\t<div className=\"add_button btn\" onClick={this.copy.bind(this)}>\r\n\t\t\t\t\t\t加我\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport './index.css';\r\n\r\nexport default class ToastComponent extends Component {\r\n\tstate = {\r\n\t\tmessage: '',\r\n\t\tshowToast: false,\r\n\t};\r\n\tcomponentDidMount() {\r\n\t\twindow.toast = this.toast.bind(this);\r\n\t}\r\n\ttoast(message = '操作成功~') {\r\n\t\tthis.setState({ message, showToast: true });\r\n\t\tdocument.body.classList.add('lock-body');\r\n\t}\r\n\tclose() {\r\n\t\tthis.setState({ showToast: false });\r\n\t\tdocument.body.classList.remove('lock-body');\r\n\t}\r\n\trender() {\r\n\t\tlet { message, showToast } = this.state;\r\n\t\treturn (\r\n\t\t\t<div id=\"toast\" className={`clearselect toast ${showToast ? 'toast--open' : ''}`}>\r\n\t\t\t\t<div className=\"toast__overlay\"></div>\r\n\t\t\t\t<div className=\"toast__content\">\r\n\t\t\t\t\t<h2>{message}</h2>\r\n\t\t\t\t\t<div className=\"footer\">\r\n\t\t\t\t\t\t<div className=\"action\" onClick={this.close.bind(this)}>\r\n\t\t\t\t\t\t\t<span>确定</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Home from './pages/home';\r\nimport Detail from './pages/detail';\r\nimport './App.css';\r\nimport BackTopComponent from './components/backTop';\r\nimport FollowComponent from './components/follow';\r\n// import LoadingComponent from './components/loading';\r\nimport ToastComponent from './components/toast';\r\n\r\nrender(\r\n\t<React.StrictMode>\r\n\t\t<Router>\r\n\t\t\t<FollowComponent />\r\n\t\t\t<Route path=\"/\" component={Home} exact />\r\n\t\t\t<Route path={`/post/:id`} component={Detail} exact />\r\n\t\t\t<BackTopComponent />\r\n\t\t\t{/* <LoadingComponent /> */}\r\n\t\t\t<ToastComponent />\r\n\t\t</Router>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('xiaoshubao')\r\n);\r\n","export default __webpack_public_path__ + \"static/media/feature1.58db9533.jpg\";","export default __webpack_public_path__ + \"static/media/feature2.1c6e6613.jpg\";","export default __webpack_public_path__ + \"static/media/20210105231911.f3f51a2e.jpg\";","export default __webpack_public_path__ + \"static/media/favicon.c0aac49a.ico\";","export default __webpack_public_path__ + \"static/media/sf.1b9a424b.ico\";","export default __webpack_public_path__ + \"static/media/feature3.e60e6339.jpg\";"],"sourceRoot":""}