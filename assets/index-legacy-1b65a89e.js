System.register(["./common-legacy-675169ac.js","./index-legacy-290d6b4e.js"],(function(e,n){"use strict";var t;return{setters:[e=>{t=e.c},null],execute:function(){const n="<h1>前端开发常用工具函数</h1>\n<h2>debounce: 函数防抖</h2>\n<pre><code>function debounce(fn, delay) {\n  delay = delay || 1000;\n  let timer = null;\n  return function () {\n    let context = this;\n    let arg = arguments;\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() =&gt; {\n      fn.apply(context, arg);\n    }, delay);\n  };\n}\n\n</code></pre>\n<h2>throttle：节流函数</h2>\n<pre><code>function throttle(fn, delay = 300) {\n  let timer = null;\n  return function () {\n    let context = this;\n    let args = arguments;\n    if (!timer) {\n      timer = setTimeout(function () {\n        fn.apply(context, args);\n        clearTimeout(timer);\n      }, delay);\n    }\n  };\n}\n\n</code></pre>\n<h2>sleep: 延迟执行函数</h2>\n<pre><code>function sleep(ms) {\n  return new Promise(r =&gt; setTimeout(() =&gt; r(true), ms))\n}\n</code></pre>\n<h2>isStatic：检测数据是不是除了 symbol 外的原始数据</h2>\n<pre><code>function isStatic(value) {\n    return(\n        typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value === null\n    )\n}\n</code></pre>\n<h2>isPrimitive：检测数据是不是原始数据</h2>\n<pre><code>function isPrimitive(value) {\n    return isStatic(value) || typeof value === 'symbol'\n}\n</code></pre>\n<h2>randomColor： 随机产生某个颜色</h2>\n<pre><code>function randomColor() {\n  return `rgb(${this.random(0, 255)}, ${this.random(0, 255)}, ${this.random(0, 255)})`\n}\n\n</code></pre>\n<h2>getRawType：获取参数类型</h2>\n<pre><code>function getRawType(value) {\n    return Object.prototype.toString.call(value).slice(8, -1)\n}\n//getoRawType([]) ==&gt; Array\n</code></pre>\n<h2>is：判断对象是否属于某个类型</h2>\n<pre><code>function is(value, type) {\n    return getRawType(value).toLowerCase() === type\n}\n\n// is('aaa', 'string') =&gt; true\n// is(1, 'number') =&gt; true\n// is([], 'array') =&gt; true\n</code></pre>\n<h2>compareVersion：版本号比较</h2>\n<pre><code>function compareVersion(v1, v2) {\n  var s1 = v1.split(&quot;.&quot;).map(v =&gt; parseInt(v));\n  var s2 = v2.split(&quot;.&quot;).map(v =&gt; parseInt(v));\n\n  var len1 = s1.length, len2 = s2.length, commonLen = Math.min(len1, len2);\n  for (var i = 0; i &lt; commonLen; ++i) {\n    if (seq1[i] != seq2[i])\n      return seq1[i]&lt;seq2[i] ? -1 : 1;\n  }\n\n  return len1 === len2 ? 0 : (len1 &lt; len2 ? -1 : 1);\n}\n\n</code></pre>\n<h2>camelize：横线转驼峰命名</h2>\n<pre><code>let camelizeRE = /-(\\w)/g;\nfunction camelize(str) {\n    return str.replace(camelizeRE, function(_, c) {\n        return c ? c.toUpperCase() : '';\n    })\n}\n//ab-cd-ef ==&gt; abCdEf\n//使用记忆函数\nlet _camelize = cached(camelize)\n</code></pre>\n<h2>capitalize：字符串首位大写</h2>\n<pre><code>function capitalize(str){\n    return str.charAt(0).toUpperCase() + str.slice(1)\n}\n// abc ==&gt; Abc\n//使用记忆函数\nlet _capitalize = cached(capitalize)\n</code></pre>\n<h2>hideMobile：手机号码中间 4 位隐藏星号</h2>\n<pre><code>function hideMobile(mobile) {\n  return mobile.replace(/^(\\d{3})\\d{4}(\\d{4})$/, &quot;$1****$2&quot;)\n}\n\n</code></pre>\n<h2>extend：将属性混合到目标对象中</h2>\n<pre><code>function extend(to, _from) {\n    for(let key in _from) {\n        to[key] = _from[key];\n    }\n    return to\n}\n</code></pre>\n<h2>Object.assign：对象属性复制，浅拷贝</h2>\n<pre><code>Object.assign = Object.assign || function(){\n    if(arguments.length == 0) throw new TypeError('Cannot convert undefined or null to object');\n\n    let target = arguments[0],\n        args = Array.prototype.slice.call(arguments, 1),\n        key\n    args.forEach(function(item){\n        for(key in item){\n            item.hasOwnProperty(key) &amp;&amp; ( target[key] = item[key] )\n        }\n    })\n    return target\n}\n</code></pre>\n<h2>deepClone：克隆数据，可深度克隆</h2>\n<pre><code>function deepClone(value, deep){\n    if(isPrimitive(value)){\n        return value\n    }\n\n    if (isArrayLike(value)) { //是类数组\n        value = Array.prototype.slice.call(value)\n        return value.map(item =&gt; deep ? deepClone(item, deep) : item)\n       }else if(isPlainObject(value)){ //是对象\n           let target = {}, key;\n          for (key in value) {\n            value.hasOwnProperty(key) &amp;&amp; ( target[key] = deep ? deepClone(value[key], deep) : value[key] )\n        }\n    }\n\n    let type = getRawType(value)\n\n    switch(type){\n        case 'Date':\n        case 'RegExp':\n        case 'Error': value = new window[type](value); break;\n    }\n    return value\n}\n</code></pre>\n<h2>识别各种浏览器及平台</h2>\n<pre><code>//运行环境是浏览器\nlet inBrowser = typeof window !== 'undefined';\n//运行环境是微信\nlet inWeex = typeof WXEnvironment !== 'undefined' &amp;&amp; !!WXEnvironment.platform;\nlet weexPlatform = inWeex &amp;&amp; WXEnvironment.platform.toLowerCase();\n//浏览器 UA 判断\nlet UA = inBrowser &amp;&amp; window.navigator.userAgent.toLowerCase();\nlet isIE = UA &amp;&amp; /msie|trident/.test(UA);\nlet isIE9 = UA &amp;&amp; UA.indexOf('msie 9.0') &gt; 0;\nlet isEdge = UA &amp;&amp; UA.indexOf('edge/') &gt; 0;\nlet isAndroid = (UA &amp;&amp; UA.indexOf('android') &gt; 0) || (weexPlatform === 'android');\nlet isIOS = (UA &amp;&amp; /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nlet isChrome = UA &amp;&amp; /chrome\\/\\d+/.test(UA) &amp;&amp; !isEdge;\n</code></pre>\n<h2>unique：数组去重，返回一个新数组</h2>\n<pre><code>function unique(arr){\n    if(!isArrayLink(arr)){ //不是类数组对象\n        return arr\n    }\n    let result = []\n    let objarr = []\n    let obj = Object.create(null)\n\n    arr.forEach(item =&gt; {\n        if(isStatic(item)){//是除了symbol外的原始数据\n            let key = item + '_' + getRawType(item);\n            if(!obj[key]){\n                obj[key] = true\n                result.push(item)\n            }\n        }else{//引用类型及symbol\n            if(!objarr.includes(item)){\n                objarr.push(item)\n                result.push(item)\n            }\n        }\n    })\n\n    return resulte\n}\n</code></pre>\n<h2>repeat：生成一个重复的字符串，有 n 个 str 组成，可修改为填充为数组等</h2>\n<pre><code>function repeat(str, n) {\n    let res = '';\n    while(n) {\n        if(n % 2 === 1) {\n            res += str;\n        }\n        if(n &gt; 1) {\n            str += str;\n        }\n        n &gt;&gt;= 1;\n    }\n    return res\n};\n//repeat('123',3) ==&gt; 123123123\n</code></pre>\n<h2>dateFormater：格式化时间</h2>\n<pre><code>function dateFormater(formater, t){\n    let date = t ? new Date(t) : new Date(),\n        Y = date.getFullYear() + '',\n        M = date.getMonth() + 1,\n        D = date.getDate(),\n        H = date.getHours(),\n        m = date.getMinutes(),\n        s = date.getSeconds();\n    return formater.replace(/YYYY|yyyy/g,Y)\n        .replace(/YY|yy/g,Y.substr(2,2))\n        .replace(/MM/g,(M&lt;10?'0':'') + M)\n        .replace(/DD/g,(D&lt;10?'0':'') + D)\n        .replace(/HH|hh/g,(H&lt;10?'0':'') + H)\n        .replace(/mm/g,(m&lt;10?'0':'') + m)\n        .replace(/ss/g,(s&lt;10?'0':'') + s)\n}\n// dateFormater('YYYY-MM-DD HH:mm', t) ==&gt; 2019-06-26 18:30\n// dateFormater('YYYYMMDDHHmm', t) ==&gt; 201906261830\n</code></pre>\n<h2>GetUrlParam：获取 Url 参数，返回一个对象</h2>\n<pre><code>function GetUrlParam(){\n    let url = document.location.toString();\n    let arrObj = url.split(&quot;?&quot;);\n    let params = Object.create(null)\n    if (arrObj.length &gt; 1){\n        arrObj = arrObj[1].split(&quot;&amp;&quot;);\n        arrObj.forEach(item=&gt;{\n            item = item.split(&quot;=&quot;);\n            params[item[0]] = item[1]\n        })\n    }\n    return params;\n}\n// ?a=1&amp;b=2&amp;c=3 ==&gt; {a: &quot;1&quot;, b: &quot;2&quot;, c: &quot;3&quot;}\n</code></pre>\n<h2>downloadFile：base64 数据导出文件，文件下载</h2>\n<pre><code>function downloadFile(filename, data){\n    let DownloadLink = document.createElement('a');\n    if ( DownloadLink ){\n        document.body.appendChild(DownloadLink);\n        DownloadLink.style = 'display: none';\n        DownloadLink.download = filename;\n        DownloadLink.href = data;\n\n        if ( document.createEvent ){\n            let DownloadEvt = document.createEvent('MouseEvents');\n\n            DownloadEvt.initEvent('click', true, false);\n            DownloadLink.dispatchEvent(DownloadEvt);\n        }\n        else if ( document.createEventObject )\n            DownloadLink.fireEvent('onclick');\n        else if (typeof DownloadLink.onclick == 'function' )\n            DownloadLink.onclick();\n\n        document.body.removeChild(DownloadLink);\n    }\n}\n</code></pre>\n<h2>toFullScreen：全屏</h2>\n<pre><code>function toFullScreen(){\n    let elem = document.body;\n    elem.webkitRequestFullScreen\n    ? elem.webkitRequestFullScreen()\n    : elem.mozRequestFullScreen\n    ? elem.mozRequestFullScreen()\n    : elem.msRequestFullscreen\n    ? elem.msRequestFullscreen()\n    : elem.requestFullScreen\n    ? elem.requestFullScreen()\n    : alert(&quot;浏览器不支持全屏&quot;);\n}\n</code></pre>\n<h2>exitFullscreen：退出全屏</h2>\n<pre><code>function exitFullscreen(){\n    let elem = parent.document;\n    elem.webkitCancelFullScreen\n    ? elem.webkitCancelFullScreen()\n    : elem.mozCancelFullScreen\n    ? elem.mozCancelFullScreen()\n    : elem.cancelFullScreen\n    ? elem.cancelFullScreen()\n    : elem.msExitFullscreen\n    ? elem.msExitFullscreen()\n    : elem.exitFullscreen\n    ? elem.exitFullscreen()\n    : alert(&quot;切换失败,可尝试Esc退出&quot;);\n}\n</code></pre>\n<h2>requestAnimationFrame：window 动画</h2>\n<pre><code>\nwindow.requestAnimationFrame = window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    function (callback) {\n        //为了使setTimteout的尽可能的接近每秒60帧的效果\n        window.setTimeout(callback, 1000 / 60);\n    };\n\nwindow.cancelAnimationFrame = window.cancelAnimationFrame ||\n    Window.webkitCancelAnimationFrame ||\n    window.mozCancelAnimationFrame ||\n    window.msCancelAnimationFrame ||\n    window.oCancelAnimationFrame ||\n    function (id) {\n        //为了使setTimteout的尽可能的接近每秒60帧的效果\n        window.clearTimeout(id);\n    }\n\n</code></pre>\n<h2>random：返回一个 lower - upper 之间的随机数</h2>\n<pre><code>function random(lower, upper){\n    lower = +lower || 0\n    upper = +upper || 0\n    return Math.random() * (upper - lower) + lower;\n}\n//random(0, 0.5) ==&gt; 0.3567039135734613\n//random(2, 1) ===&gt; 1.6718418553475423\n//random(-2, -1) ==&gt; -1.4474325452361945\n\n</code></pre>\n<h2>禁止右键、选择、复制</h2>\n<pre><code>['contextmenu', 'selectstart', 'copy'].forEach(function(ev){\n    document.addEventListener(ev, function(event){\n        return event.returnValue = false\n    })\n});\n</code></pre>\n",r=e("__default",t("intro","简介","/notes/funs/intro",n)),o=[];e({page:o,default:o}),e("__module",t("intro","工具函数",r.path,n,o))}}}));
